<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BENULL</title>
  
  <subtitle>tomorrow is another day</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-12-22T12:49:42.762Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BENULL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Graph Embedded Pose Clustering for Anomaly Detection</title>
    <link href="http://yoursite.com/2021/12/22/Graph%20Embedded%20Pose%20Clustering%20for%20Anomaly%20Detection/"/>
    <id>http://yoursite.com/2021/12/22/Graph%20Embedded%20Pose%20Clustering%20for%20Anomaly%20Detection/</id>
    <published>2021-12-22T12:48:54.000Z</published>
    <updated>2021-12-22T12:49:42.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Graph-Embedded-Pose-Clustering-for-Anomaly-Detection"><a href="#Graph-Embedded-Pose-Clustering-for-Anomaly-Detection" class="headerlink" title="Graph Embedded Pose Clustering for Anomaly Detection"></a>Graph Embedded Pose Clustering for Anomaly Detection</h1><p>会议：CVPR 2020</p><p>单位：Tel-Aviv University,  Alibaba Group</p><p>论文：<a href="https://arxiv.org/abs/1912.11850" target="_blank" rel="noopener">arxiv</a></p><p>代码：<a href="https://github.com/amirmk89/gepc" target="_blank" rel="noopener">code</a></p><h2 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h2><p>从输入视频序列计算得到<strong>人体姿态图</strong>，之后通过<strong>时空图卷积自编码器</strong>和<strong>聚类</strong>将这些姿态图映射到隐空间</p><p>提出了两种粒度的异常检测</p><ul><li>粗粒度，指定某类行为是正常其余为异常行为（ShanghaiTech Campus数据集上）</li><li>细粒度，指定某类行为为异常其余非异常行为 （NTU-RGB+D、Kinetics 400数据集上）</li></ul><p>人体姿态图的好处</p><ol><li>使得问题更抽象，算法只关注人体姿态不受无关特征的影响比如光照，视角</li><li>人体姿态图更紧凑，使得推理、训练和测试更快</li></ol><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/7cf783ed55d3a64cb6f8e6a6f4ce7477.png" alt="img"></p><h3 id="时空图卷积自编码"><a href="#时空图卷积自编码" class="headerlink" title="时空图卷积自编码"></a>时空图卷积自编码</h3><p>使用ST-GCN块(GCN算子由空间注意力图卷积替换)来构造时空图卷积自编码器（ST-GCAE）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/01be79475736651c9f517eb2220eb280.png" alt="img"></p><p>三种类型的邻接矩阵</p><ul><li>身体部位物理邻接矩阵</li><li><p>数据集相关的关键点关系（训练中学习得到）</p></li><li><p>自注意力模块推理得到（特定于样本）</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/b8760b3ccb5e9681523774adf6c4fe39.png" alt="img"></p><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>对于每个输入样本$\mathbf{x}<em>{i}$用$\mathbf{z}</em>{i}$表示编码器的隐向量，$\mathbf{y}<em>{i}$计算软聚类，$\Theta$表示聚类层参数，$p</em>{i k}$表示第$i$个样本分配到第$k$簇的概率</p><script type="math/tex; mode=display">p_{i k}=\operatorname{Pr}\left(y_{i}=k \mid \mathbf{z}_{i}, \Theta\right)=\frac{\exp \left(\boldsymbol{\theta}_{k}^{T} \mathbf{z}_{i}\right)}{\sum_{k^{\prime}=1}^{K} \exp \left(\boldsymbol{\theta}_{k^{\prime}}^{T} \mathbf{z}_{i}\right)}</script><p>聚类的目标函数是最小化当前模型预测分布P和目标分布Q之间的KL散度</p><script type="math/tex; mode=display">L_{c l u s t e r}=K L(Q \| P)=\sum_{i} \sum_{k} q_{i k} \log \frac{q_{i k}}{p_{i k}}</script><p>其中</p><script type="math/tex; mode=display">q_{i k}=\frac{p_{i k} /\left(\sum_{i^{\prime}} p_{i^{\prime} k}\right)^{\frac{1}{2}}}{\sum_{k^{\prime}} p_{i k^{\prime}} /\left(\sum_{i^{\prime}} p_{i^{\prime} k^{\prime}}\right)^{\frac{1}{2}}}</script><h3 id="Normality-Scoring"><a href="#Normality-Scoring" class="headerlink" title="Normality Scoring"></a>Normality Scoring</h3><p>狄利克雷过程混合模型（Dirichlet Process Mixture Model, DPMM）是一种非参数贝叶斯模型，它可以理解为一种聚类方法，但是不需要指定类别数量，它可以从数据中推断簇的数量</p><p><a href="http://www.datalearner.com/blog/1051471599181249" target="_blank" rel="noopener"> 狄利克雷过程混合模型</a></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="ShangHaiTech数据集-细粒度异常检测"><a href="#ShangHaiTech数据集-细粒度异常检测" class="headerlink" title="ShangHaiTech数据集 细粒度异常检测"></a>ShangHaiTech数据集 细粒度异常检测</h3><p><strong>关节点坐标作为输入特征没有关节点小图做特征效果好</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c2f14e7222ce863276286c78ecd700f.png" alt="img"></p><h3 id="NTU-RGB-D、Kinetics-400-粗粒度异常检测"><a href="#NTU-RGB-D、Kinetics-400-粗粒度异常检测" class="headerlink" title="NTU-RGB+D、Kinetics 400 粗粒度异常检测"></a>NTU-RGB+D、Kinetics 400 粗粒度异常检测</h3><p>使用10个随机和10个有意义的分割来评估每个数据集</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/a2f17cb1cbe8eaf30fbc784973920986.png" alt="img"></p><h3 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h3><p>评估模型对噪声的鲁棒性，即在训练集中存在一定百分比的异常动作</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0b12e9240e5efc19fff3f8868d6edff7.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Graph-Embedded-Pose-Clustering-for-Anomaly-Detection&quot;&gt;&lt;a href=&quot;#Graph-Embedded-Pose-Clustering-for-Anomaly-Detection&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
      <category term="Paper" scheme="http://yoursite.com/tags/Paper/"/>
    
      <category term="AnomalyDetection" scheme="http://yoursite.com/tags/AnomalyDetection/"/>
    
  </entry>
  
  <entry>
    <title>Learning Regularity in Skeleton Trajectories for Anomaly Detection in Videos</title>
    <link href="http://yoursite.com/2021/12/21/Learning-Regularity-in-Skeleton-Trajectories-for-Anomaly-Detection-in-Videos/"/>
    <id>http://yoursite.com/2021/12/21/Learning-Regularity-in-Skeleton-Trajectories-for-Anomaly-Detection-in-Videos/</id>
    <published>2021-12-21T11:02:54.000Z</published>
    <updated>2021-12-22T12:48:55.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Learning-Regularity-in-Skeleton-Trajectories-for-Anomaly-Detection-in-Videos"><a href="#Learning-Regularity-in-Skeleton-Trajectories-for-Anomaly-Detection-in-Videos" class="headerlink" title="Learning Regularity in Skeleton Trajectories for Anomaly Detection in Videos"></a>Learning Regularity in Skeleton Trajectories for Anomaly Detection in Videos</h1><blockquote><p>单位: Deakin University<br>会议: CVPR 2019<br>论文地址: <a href="https://arxiv.org/abs/1903.03295" target="_blank" rel="noopener">arxiv</a><br>代码: <a href="https://github.com/RomeroBarata/skeleton_based_anomaly_detection" target="_blank" rel="noopener">skeleton_based_anomaly_detection</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/38293201ddc54ecc868b7d9940f292fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>该问题的挑战性在于缺乏人的监督和视频事件中人类可感知异常的定义很模糊。其中基于像素的特征受噪音影响大，掩盖了场景中的重要信息，更进一步，这些特征中存在的冗余信息增加了训练模型去分辨噪声和特征的负担。同时当前的方法由于视觉特征和事件真实意义之间存在语义差异，缺乏可解释性。这种局限性又因为深度神经网络放大了。</p><h2 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h2><p>提出了一种新的方法来建模监控视频中人体运动的正常模式，使用动态的骨架特征进行异常检测，将骨架运动分解为两个子部分：整体身体运动和局部身体姿势。与传统的基于外观的模型相比，该方法具有更好的异常检测性能，同时提供了语义上可理解的特征和支持可解释性的网络架构，提供决策影响因素的权重和这些因素的可视化，支持对其内部推理的开箱解释。</p><p><strong>为什么使用骨架特征？</strong></p><p>相比于基于外观的特征，骨架特征紧凑、具有结构性，语义丰富，对人类行为和运动具有高度描述性</p><p><strong>为什么将骨架运动分解为全局和局部两部分？</strong></p><p>在真实的监控视频中，人体骨骼的大小在很大程度上取决于它们的位置和动作。对于近处的骨骼，观测到的运动主要受局部因素的影响。同时，对于远处的骨骼，其运动主要由整体运动控制，而局部变形则被忽略</p><p><strong>为什么将包围盒作为全局运动特征的一部分</strong>？</p><p>在2D图像空间中，因为缺少深度信息，仅xy坐标无法很好地反映场景中的真实位置。但是，骨架边界框的大小与骨架在场景中的深度相关。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/74d38ee786f6905f7c707ce2a4d76811.png" alt="img"></p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p> <img src="https://img-blog.csdnimg.cn/img_convert/1b3e40e8dec8709c3b5edf39a40bdc49.png" alt="img"></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>ShanghaiTech数据集中的大多数异常事件都与人类有关，剔除了6个异常事件与人类无关的测试视频，并将其他101个视频作为Human-related (HR) ShanghaiTech</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0908b3e65c2ca925dc3f5b3e83185fc0.png" alt="img"></p><h3 id="错误模式分析"><a href="#错误模式分析" class="headerlink" title="错误模式分析"></a>错误模式分析</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/cc67566c127aea12046ceb5eae79e4af.png" alt="img"></p><ul><li>最主要的原因在于骨架的检测和跟踪的不准确率</li><li>异常主体的骨架和正常主体的骨架相似</li></ul><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>骨架特征平均每帧不到100维仍然提供与当前最先进方法相同或更好的性能。显然，MPED-RNN的性能仍然取决于骨架检测和跟踪的质量。这个问题在低分辨率视频的情况下更为严重。对于骨架不可用的情况，基于外观的特征可以提供补充信息。虽然在大多数情况下，单个的运动和姿势可以反映异常情况，但是不包括事件中多人之间以及人与物体之间的交互信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Learning-Regularity-in-Skeleton-Trajectories-for-Anomaly-Detection-in-Videos&quot;&gt;&lt;a href=&quot;#Learning-Regularity-in-Skeleton-Trajectories
      
    
    </summary>
    
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
      <category term="Paper" scheme="http://yoursite.com/tags/Paper/"/>
    
      <category term="AnomalyDetection" scheme="http://yoursite.com/tags/AnomalyDetection/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记——海边的卡夫卡</title>
    <link href="http://yoursite.com/2021/12/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%B5%B7%E8%BE%B9%E7%9A%84%E5%8D%A1%E5%A4%AB%E5%8D%A1/"/>
    <id>http://yoursite.com/2021/12/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%B5%B7%E8%BE%B9%E7%9A%84%E5%8D%A1%E5%A4%AB%E5%8D%A1/</id>
    <published>2021-12-20T04:41:45.000Z</published>
    <updated>2021-12-20T04:50:06.101Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.cn/images/I/41nXfg2I4WL._SY346_.jpg" align="center"></p><blockquote><p>作者: <a href="https://book.douban.com/search/村上春树" target="_blank" rel="noopener">[日]村上春树</a><br>出版社: 上海译文出版社<br>原作名: 海辺のカフカ<br>译者: <a href="https://book.douban.com/search/林少华" target="_blank" rel="noopener">林少华</a><br>出版年: 2018-8<br>ISBN: 9787532777617</p></blockquote><div class="note info"><p>211006</p></div><p><strong>⭕️“年龄在十五岁，意味着心在希望与绝望之间碰撞，意味着世界在现实性与虚拟性之间游移，意味着身体在跳跃与沉实之间徘徊。我们既接受热切的祝福，又接受凶狠的诅咒。”</strong></p><p><strong>⭕️众所周知，村上是一位彻头彻尾的个人主义者（有人称之为“村上流新个人主义”），村上自己也坦率承认这一点，“什么也不引渡给别人，同任何人都不发生连带关系”（村上春树谈《海边的卡夫卡》，载于《文学界》2003年第4期）。这点在他以往的作品中表现得十分明显，是其作品主人公一个最明显的特点。那些主人公几乎全是尚未结婚或离婚的单身男性，没有家庭没有子女，亲戚也基本没有，甚至父母也不出场。不在公司等必须与人协调各种关系的团体中任职，失业或者半失业，从事类似翻译或自由撰稿人那样个体性质的工作。因此他们从来不是社会这部庞大机器中的一个螺丝钉，不认同任何权威、权势、权位、体制和所谓主流价值观，而宁愿离群索居，在社会边缘地带作为边缘人默默拧紧自己的发条。但他们绝非弱者，也同所谓颓废、冷漠不大是一回事。他们拥有健全的知识体系、独立的人格和价值观、世界观，一个突出表现就是独自在脑袋里或在私人交谈中对现存社会体制即“高度发达的资本主义”酷酷地评头论足、冷嘲热讽，时有一针见血的见解和惊人之语，在这个意义上堪称真正的强者。</strong></p><p><strong>⭕️“他这人绝对不直接说不可怎样做，而是通过他身上存在的某种知识形态来传达什么。”</strong></p><p><strong>⭕️“我这个人身上，强烈的向内部分和物理性外向部分好像同时存在。这点现在也一样，人这东西是很难改变的。”</strong></p><p><strong>⭕️“我想，他大约属于他所说的那种“心不化妆”的人——他说过最让人不舒服的交往对象就是“心化妆”的人——他的外表应该就是他的内心。”</strong></p><p><strong>⭕️“村上应道：“是的。我是认为人生基本是孤独的。人们总是进入自己一个人的世界，进得很深很深。而在进得最深的地方就会产生‘连带感’。就是说，在人人都是孤独的这一层面产生人人相连的‘连带感’。只要明确认识到自己是孤独的，那么就能与别人分享这一认识。也就是说，只要我把它作为故事完整地写出来，就能在自己和读者之间产生‘连带感’。其实这也就是所谓创作欲。不错，人人都是孤独的。但不能因为孤独而切断同众人的联系，彻底把自己孤立起来。而应该深深挖洞。只要一个劲儿地往下深挖，就会在某处同别人连在一起。一味沉浸于孤独之中用墙把自己围起来是不行的。这是我的基本想法。”</strong></p><div class="note info"><p>211007</p></div><p><strong>⭕️“偶然的相遇对于人的心情是相当重要的”</strong></p><p><strong>⭕️“柏拉图《盛宴》中阿里斯托芬的说法，远古神话世界里有三种人。古时候，世界不是由男和女，而是由男男和男女和女女构成的。就是说，一个人用的是今天两个人的材料。大家对此心满意足，相安无事地生活。岂料，神用利刀将所有人一劈两半，劈得利利索索。结果，世上只有男和女，为了寻找本应有的另一半，人们开始左顾右盼，惶惶不可终日”</strong></p><div class="note info"><p>211104</p></div><p><strong>⭕️“有能力的孩子有时因其有能力而一个又一个冲击本应由身边大人达成的目标，这样一来，就会由于过多处理眼前的现实性课题而渐渐失去其中作为孩子应有的新鲜的激动和成就感。”</strong></p><p><strong>⭕️“可是人这东西是要把自己附在什么上面才能生存的。”大岛说，“不能不那样。你也难免不知不觉地如法炮制。如歌德所说，世间万物无一不是隐喻。”</strong></p><div class="note info"><p>211114</p></div><p><strong>⭕️“我久久盯视着这奇妙的肉体器官——它属于我的，却又在几乎所有的场合不服从我的意志，仿佛在独自思考与脑袋所思所想不同的什么。”</strong></p><p><strong>⭕️“你惧怕想像力，更惧怕梦，惧怕理应在梦中开始的责任。然而觉不能不睡，而睡觉必然做梦。清醒时的想像力总可以设法阻止，但梦奈何不得。”</strong></p><p><strong>⭕️“中田君，大凡事物必有顺序。”琼尼·沃克说，“看得太超前了不行。看得太超前，势必忽视脚下，人往往跌倒。可另一方面，光看脚下也不行。不看好前面，会撞上什么。所以么，要在多少往前看的同时按部就班处理眼下事物。这点至为关键，无论做什么。”</strong></p><div class="note info"><p>211123</p></div><p><strong>⭕️“在大自然中一个人孤零零生活的确妙不可言，但一直那样下去并不容易。理论上不是不可能，实际上也有人实践。但大自然这东西在某种意义上是不自然的，安逸这东西在某种意义上是带有威胁性的，而顺利接受这种悖反性则需要相应的准备和经验。所以我们姑且返回城去，返回社会与人们的活动中。”</strong></p><p><strong>⭕️“阿里斯托芬的故事。我们大部分人都是在拼死拼活寻觅自己剩下那一半的过程中笨拙地送走人生的，”</strong></p><p><strong>⭕️“幸福只有一种，不幸千差万别，正如托尔斯泰所指出的。幸福是寓言，不幸是故事。”</strong></p><p>⭕️<strong>“我们的人生有个至此再后退不得的临界点，另外虽然情况十分少见，但至此再前进不得的点也是有的。那个点到来的时候，好也罢坏也罢，我们都只能默默接受。我们便是这样活着。”</strong></p><div class="note info"><p>211124</p></div><p><strong>⭕️“缺乏想像力的狭隘、苛刻、自以为是的命题、空洞的术语、被篡夺的理想、僵化的思想体系——对我来说，真正可怕是这些东西。我从心底畏惧和憎恶这些东西。”</strong></p><div class="note info"><p>211129</p></div><p><strong>⭕️“多数希腊悲剧的主题。不是人选择命运，而是命运选择人。”</strong></p><p><strong>⭕️“人不是因其缺点、而是因其优点而被拖入更大的悲剧之中的。索福克勒斯的《俄狄浦斯王》即是显例。俄狄浦斯王不是因其怠惰和愚钝、而恰恰是因其勇敢和正直才给他带来了悲剧。于是这里边产生了无法回避的irony。”</strong></p><div class="note info"><p>211125</p></div><p>⭕️<strong>“就是为促使事物本来具有的作用发挥出来而进行管理。我的职责就是管理世界与世界的相互关系，就是理顺事物的顺序，就是让结果出现在原因之后，就是不使含义与含义相混淆，就是让过去出现在现在之前，就是让未来出现在现在之后。”</strong></p><div class="note info"><p>211126</p></div><p><strong>⭕️“田村卡夫卡君，或许世上几乎所有人都不追求什么自由，不过自以为追求罢了。一切都是幻想。假如真给予自由，人们十有八九不知所措。这点记住好了：人们实际上喜欢不自由。”</strong></p><p><strong>⭕️“我追求的、我所追求的强壮不是一争胜负的强壮。我不希求用于反击外力的墙壁。我希求的是接受外力、忍耐外力的强壮，是能够静静地忍受不公平不走运不理解误解和悲伤等种种情况的强壮。”</strong></p><div class="note info"><p>211127</p></div><p><strong>⭕️“全都是伟人、天才，人世间就麻烦了。必须有人四下照看，处理各种现实性问题才行。”</strong></p><p><strong>⭕️“充满柔软的好奇心的、内敛而执著的精神”</strong></p><div class="note info"><p>211211</p></div><p><strong>⭕️“回忆会从内侧温暖你的身体，同时又从内侧剧烈切割你的身体。”</strong></p><div class="note info"><p>211212</p></div><p><strong>⭕️“非常重要，具有想变得坚强的意志这点”</strong></p><div class="note info"><p>211219</p></div><p><strong>⭕️“人这东西——当然是说在某种程度上——取决于生长的场所。想法和感觉大约是同地形、温度和风向连动的。”</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://images-cn.ssl-images-amazon.cn/images/I/41nXfg2I4WL._SY346_.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者: &lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>EXPLAINABLE-DEEP-ONE-CLASS-CLASSIFICATION</title>
    <link href="http://yoursite.com/2021/12/17/EXPLAINABLE-DEEP-ONE-CLASS-CLASSIFICATION/"/>
    <id>http://yoursite.com/2021/12/17/EXPLAINABLE-DEEP-ONE-CLASS-CLASSIFICATION/</id>
    <published>2021-12-17T01:17:43.000Z</published>
    <updated>2021-12-16T14:38:36.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常检测-EXPLAINABLE-DEEP-ONE-CLASS-CLASSIFICATION"><a href="#异常检测-EXPLAINABLE-DEEP-ONE-CLASS-CLASSIFICATION" class="headerlink" title="[异常检测]EXPLAINABLE DEEP ONE-CLASS CLASSIFICATION"></a>[异常检测]EXPLAINABLE DEEP ONE-CLASS CLASSIFICATION</h1><blockquote><p>会议： 2021 ICLR<br>论文： <a href="https://openreview.net/forum?id=A5VV3UyIQz" target="_blank" rel="noopener">https://openreview.net/forum?id=A5VV3UyIQz</a>.<br>代码：<a href="https://github.com/liznerski/fcdd" target="_blank" rel="noopener">https://github.com/liznerski/fcdd</a></p></blockquote><h2 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h2><p>因为用于异常检测的深度单分类方法学习映射将正常样本集中在特征空间而将异常样本映射出去。由于这样的变换是非线性的，所以很难去解释。于是这篇文章提出了全卷积数据描述（FCDD），是对DSVDD的一种修改，使变换后的样本本身对应于下采样的异常热力图。</p><p><img src="https://s2.loli.net/2021/12/16/lzbN6t4f2GXORQ8.png" alt="1639373896137-c3eda355-38d3-4989-a832-a6f91efd4262.png"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>通过FCN全卷积网络，图片被映射到$1 ∗ u ∗ v $的特征图。论文提到卷积层的一个重要性质就是特征图的一个像素只有关于输入的一个固定感受野，这样特征图的异常分数就可以映射回原图片的位置，保留了空间信息。</p><p><img src="https://s2.loli.net/2021/12/16/Xc57AigJwSPx13q.png" alt="image-20211216215403677.png"></p><p>该方法能够在训练同时给出异常的解释，同时仅使用少量异常样本能显著的提升模型性能。并且使用FCDD的可解释性证明了深度单类分类模型容易受到虚假的图像特征影响（Clever Hans effect)。</p><p>同Outlier Exposure的思想一样，文章发现仅使用少数样本作为标记了的异常样本也表现得很出色。此外，在没有任何已知异常的情况下，使用合成异常也是有效的。</p><h3 id="FCDD"><a href="#FCDD" class="headerlink" title="FCDD"></a>FCDD</h3><p>全卷积数据描述（FCDD），结合FCN和<a href="https://arxiv.org/abs/2006.00339v1" target="_blank" rel="noopener">HSC</a>提出了一种深度单分类方法，其中输出特征保留空间信息，同时也作为下采样异常热图。</p><p>FCDD目标函数应用Pseudo-Huber 损失函数在FCN的输出矩阵$A(X)=\left(\sqrt{\phi(X ; \mathcal{W})^{2}+1}-1\right)$</p><p><strong>目标函数</strong></p><script type="math/tex; mode=display">\min _{\mathcal{W}} \frac{1}{n} \sum_{i=1}^{n}\left(1-y_{i}\right) \frac{1}{u \cdot v}\left\|A\left(X_{i}\right)\right\|_{1}-y_{i} \log \left(1-\exp \left(-\frac{1}{u \cdot v}\left\|A\left(X_{i}\right)\right\|_{1}\right)\right) .</script><p>这里$|A(X)|<em>{1}$是$A(X)$中所有元素的总和，它们都是正的。目标是最大化异常的$|A(X)|</em>{1}$，最小化正常样本的$|A(X)|<em>{1}$，因此使用$|A(X)|</em>{1}$作为异常得分</p><p><strong>Huber</strong> 损失函数   </p><p>与平方误差损失相比，对数据中的游离点较不敏感  Huber损失函数经常用于回归问题，它是分段函数，公式如下：</p><p><img src="https://s2.loli.net/2021/12/16/CYwzaptvlAS6yKW.png" alt="1639375676263-77e427e8-8177-4232-af52-01ef6835f312.png"></p><p>可以看出当残差（预测值与目标值的差值，即y-f(x) )很小的时候，损失函数为L2范数，残差大的时候，为L1范数的线性函数。该公式依赖于参数delta，delta越大，则两边的线性部分越陡峭。</p><p>L1、L2、Huber损失函数的对比图如下，其中Huber的delta取0.25、5两个值：</p><p><strong><img src="https://s2.loli.net/2021/12/16/F3a17zB8muTsvCM.png" alt="1639375667366-92cb7bf5-8809-469e-b573-a321197331ee.png"></strong></p><p><strong>Pseudo-Huber</strong>  </p><p> Huber loss 的一种平滑近似，保证各阶可导  </p><p><img src="https://s2.loli.net/2021/12/16/XFbUfakWzOuMHne.png" alt="1639376359351-214a306b-55af-450b-be62-d5f582ab9f56.png"></p><p>同时对于需要全分辨率热图的情况，提供了一种基于感受野特性对低分辨率热图进行上采样的方法。</p><h2 id="Heatmap-Upsampling"><a href="#Heatmap-Upsampling" class="headerlink" title="Heatmap Upsampling"></a>Heatmap Upsampling</h2><p>因为论文的设定在试验阶段是没有ground-truth的，因此上采样部分的训练是无监督的，也就是无法直接训练一个deconvolutional 层所以设计了heatmap upsampling算法</p><p><img src="https://s2.loli.net/2021/12/16/BkiD5QCyt48jVMn.png" alt="1639663879781-091e6733-ece4-4165-bd70-61ea185a22b8.png"></p><p>该算法基于feature map的每一个值都对应着原图的唯一一个感受野，并且在该感受野中，每个点对该输出的影响以一种高斯分布从感受野中心进行减弱（想象成一个卷积核的中心的是一个高斯分布的均值点，其他点随着距离下降）</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><img src="https://s2.loli.net/2021/12/16/32izw1huF5kUoxW.png" alt="image-20211216220052115.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/supergxt/article/details/119823181" target="_blank" rel="noopener">2021 ICLR Explainable Deep One-Class Classfication论文阅读总结</a></li><li><a href="https://www.cnblogs.com/bbn0111/p/6769876.html" target="_blank" rel="noopener">Huber损失函数</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异常检测-EXPLAINABLE-DEEP-ONE-CLASS-CLASSIFICATION&quot;&gt;&lt;a href=&quot;#异常检测-EXPLAINABLE-DEEP-ONE-CLASS-CLASSIFICATION&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
      <category term="Paper" scheme="http://yoursite.com/tags/Paper/"/>
    
      <category term="AnomalyDetection" scheme="http://yoursite.com/tags/AnomalyDetection/"/>
    
  </entry>
  
  <entry>
    <title>Vue3+TypeScript+Element-Plus+Flask开发记录</title>
    <link href="http://yoursite.com/2021/12/16/Vue3+TypeScript+Element-Plus+Flask%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2021/12/16/Vue3+TypeScript+Element-Plus+Flask%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-16T13:02:25.000Z</published>
    <updated>2021-12-16T14:44:37.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-TypeScript-Element-Plus-Flask开发记录"><a href="#Vue3-TypeScript-Element-Plus-Flask开发记录" class="headerlink" title="Vue3+TypeScript+Element-Plus+Flask开发记录"></a>Vue3+TypeScript+Element-Plus+Flask开发记录</h1><h2 id="1-跨域"><a href="#1-跨域" class="headerlink" title="1. 跨域"></a>1. 跨域</h2><h3 id="Flask后端解决"><a href="#Flask后端解决" class="headerlink" title="Flask后端解决"></a>Flask后端解决</h3><p>/<code>pip install flask-cors</code></p><p><strong>全局配置</strong>/</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>使用 <code>@cross_origin</code> 配置单行路由</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> cross_origin</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@cross_origin(supports_credentials=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello, world!'</span></span><br></pre></td></tr></table></figure><p><strong>配置参数</strong></p><p><img src="https://pic1.zhimg.com/v2-423ab17be73d1757ab7cc3c321ce321c_r.jpg" alt="img"></p><h3 id="前端解决"><a href="#前端解决" class="headerlink" title="前端解决"></a>前端解决</h3><p>根目录下添加<code>vue.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 跨域请求</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>,<span class="comment">//</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    https: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//以上的ip和端口是我们本机的;下面为需要跨域的</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">//配置跨域</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://localhost:xxxx/xx/'</span>, <span class="comment">//填写你们真实的后台接口</span></span><br><span class="line">        ws: <span class="literal">true</span>,</span><br><span class="line">        changOrigin: <span class="literal">true</span>, <span class="comment">//允许跨域</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span> <span class="comment">//请求的时候使用这个api就可以</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx-配置跨域"><a href="#Nginx-配置跨域" class="headerlink" title="Nginx 配置跨域"></a>Nginx 配置跨域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;  </span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">    add_header Access-Control-Allow-Methods &apos;GET, POST, OPTIONS&apos;;</span><br><span class="line">    add_header Access-Control-Allow-Headers &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&apos;;</span><br><span class="line"></span><br><span class="line">    if ($request_method = &apos;OPTIONS&apos;) &#123;</span><br><span class="line">        return 204;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-实现CSS隐藏滚动条并可以滚动内容"><a href="#2-实现CSS隐藏滚动条并可以滚动内容" class="headerlink" title="2. 实现CSS隐藏滚动条并可以滚动内容"></a>2. 实现CSS隐藏滚动条并可以滚动内容</h2><p>通过CSS隐藏滚动条的方法，不过这个方法不兼容IE，做移动端的可以使用。 那就是自定义滚动条的伪对象选择器::-<a href="http://caibaojian.com/webkit-scrollbar.html" target="_blank" rel="noopener">webkit-scrollbar</a></p><p><strong>chrome 和Safari</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.element::-webkit-scrollbar &#123; width: 0 !important &#125;</span><br></pre></td></tr></table></figure><p><strong>IE 10+</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.element &#123; -ms-overflow-style: none; &#125;</span><br></pre></td></tr></table></figure><p><strong>Firefox</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.element &#123; overflow: -moz-scrollbars-none; &#125;</span><br></pre></td></tr></table></figure><h2 id="3-修改Element样式"><a href="#3-修改Element样式" class="headerlink" title="3. 修改Element样式"></a>3. 修改Element样式</h2><ul><li><p>采用定位组件的方法，通过组件外层的class或id定位，使用 &gt;&gt;&gt; 进行样式穿透    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dateRange"</span>&gt;</span><br><span class="line">            &lt;el-date-picker</span><br><span class="line">              v-model=<span class="string">"dengyouTimeValue"</span></span><br><span class="line">              type=<span class="string">"daterange"</span></span><br><span class="line">              @change=<span class="string">"dengyouSelectTime"</span></span><br><span class="line">              unlink-panels</span><br><span class="line">              range-separator=<span class="string">"至"</span></span><br><span class="line">              start-placeholder=<span class="string">"开始日期"</span></span><br><span class="line">              end-placeholder=<span class="string">"结束日期"</span></span><br><span class="line">              :picker-options=<span class="string">"dengyou_pickerOptions"</span></span><br><span class="line">            &gt;&lt;<span class="regexp">/el-date-picker&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="comment">/* 这里是element时间选择器的公共样式 */</span></span><br><span class="line"></span><br><span class="line">.dateRange &gt;&gt;&gt; .el-date-table td &#123;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用deep修改样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 修改级联选择框的默认宽度</span><br><span class="line">/deep/ .el-cascader &#123;</span><br><span class="line">  <span class="selector-tag">width</span>: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::v-deep</span> <span class="selector-class">.el-button</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-el-input其中v-model-number-使用修饰符-number可以将输入的数据转换为Number类型"><a href="#4-el-input其中v-model-number-使用修饰符-number可以将输入的数据转换为Number类型" class="headerlink" title="4.el-input其中v-model.number 使用修饰符.number可以将输入的数据转换为Number类型"></a>4.el-input其中v-model.number 使用修饰符.number可以将输入的数据转换为Number类型</h2><h2 id="5-Flask-Sqlalchemy-使用-session-bulk-save-objects后返回主键id"><a href="#5-Flask-Sqlalchemy-使用-session-bulk-save-objects后返回主键id" class="headerlink" title="5.Flask-Sqlalchemy 使用 session.bulk_save_objects后返回主键id"></a>5.Flask-Sqlalchemy 使用 <code>session.bulk_save_objects</code>后返回主键id</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> y:</span><br><span class="line">   obj = Post(...)</span><br><span class="line">   obj_list.append(obj)</span><br><span class="line">session.bulk_save_objects(obj_list,return_defaults = <span class="literal">True</span>)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj_list:</span><br><span class="line">   print(i.id)</span><br></pre></td></tr></table></figure><h2 id="6-SQLAlchemy-中的-QueuePool-出现-TimeoutError"><a href="#6-SQLAlchemy-中的-QueuePool-出现-TimeoutError" class="headerlink" title="6. SQLAlchemy 中的 QueuePool 出现 TimeoutError"></a>6. SQLAlchemy 中的 QueuePool 出现 TimeoutError</h2><p>根本原因是因为该进程对数据库的连接池满了，且等待之前的 session 超时</p><p>添加以下代码,自动关闭所有未使用连接。特别是如果你正在使用以下语法Model.query.filter_by</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shutdown_session</span><span class="params">(exception=None)</span>:</span></span><br><span class="line">  db.session.remove()</span><br></pre></td></tr></table></figure><h2 id="7-sqlalchemy批量插入数据（性能问题）"><a href="#7-sqlalchemy批量插入数据（性能问题）" class="headerlink" title="7.sqlalchemy批量插入数据（性能问题）"></a>7.sqlalchemy批量插入数据（性能问题）</h2><p><a href="https://blog.csdn.net/a11131ghj/article/details/107192452" target="_blank" rel="noopener">参考此文</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/274769003" target="_blank" rel="noopener">利用Python | Flask 解决跨域问题</a></li><li><a href="https://segmentfault.com/a/1190000012550346" target="_blank" rel="noopener">Nginx配置跨域</a></li><li><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/cors.html" target="_blank" rel="noopener">跨域问题</a></li><li><a href="http://caibaojian.com/hide-scrollbar.html" target="_blank" rel="noopener">实现CSS隐藏滚动条并可以滚动内容</a></li><li><a href="https://www.cnblogs.com/aurora-ql/p/13308107.html" target="_blank" rel="noopener">修改ElementUI样式的几种方式 </a></li><li><a href="https://blog.csdn.net/qq_40291247/article/details/106186933" target="_blank" rel="noopener">vue-cli3.0深度选择器/deep/报错</a></li><li><a href="https://reality0ne.com/sqlalchemy-zhong-de-queuepool-chu-xian-timeouterror/" target="_blank" rel="noopener">SQLAlchemy 中的 QueuePool 出现 TimeoutError</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue3-TypeScript-Element-Plus-Flask开发记录&quot;&gt;&lt;a href=&quot;#Vue3-TypeScript-Element-Plus-Flask开发记录&quot; class=&quot;headerlink&quot; title=&quot;Vue3+TypeScript+
      
    
    </summary>
    
    
      <category term="Project" scheme="http://yoursite.com/categories/Project/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Project" scheme="http://yoursite.com/tags/Project/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记——人间值得</title>
    <link href="http://yoursite.com/2021/11/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/"/>
    <id>http://yoursite.com/2021/11/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E4%BA%BA%E9%97%B4%E5%80%BC%E5%BE%97/</id>
    <published>2021-11-27T04:43:23.000Z</published>
    <updated>2021-11-27T04:44:21.026Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://m.media-amazon.com/images/I/51PvwYuhqbL._SY346_.jpg" align="center"></p><blockquote><p>作者: <a href="https://book.douban.com/search/中村恒子" target="_blank" rel="noopener">[日]中村恒子</a> / <a href="https://book.douban.com/search/奥田弘美" target="_blank" rel="noopener">[日]奥田弘美</a><br>原作名: 心に折り合いをつけて うまいことやる習慣<br>译者: <a href="https://book.douban.com/search/范宏涛" target="_blank" rel="noopener">范宏涛</a><br>出版年: 2019-8<br>ISBN: 9787547734315</p></blockquote><div class="note info"><p>211124</p></div><p><strong>⭕️“人生，只要能照亮某个角落就够了。”</strong></p><p><strong>⭕️“自己力所能及的事，就尝试去做”</strong></p><p><strong>⭕️“从本质上来说，人就是为了生活而工作。这个道理，亘古未变。至于“人生价值”“自我成长”之类，是要等自己立足安稳后，在闲暇之余慢慢思考的问题。人生很长，慢慢思考就好了。”</strong></p><p><strong>⭕️当你眉头一皱，去思考“这个工作有什么意义”，不管是谁都会徒增烦恼，觉得工作无法进行下去。”</strong></p><p><strong>⭕️“是不是去行动总比思虑强？行动才是促进工作的良药。这样你就不会被不必要的杂念所困扰，自然地认为挫折与麻烦“只不过是偶然发生的事情”。”</strong></p><p><strong>⭕️“不要在身心俱疲的时候才想着行动，而要在体力和精力都比较充沛的情况下准备周全，再做出明智的抉择。”</strong></p><p><strong>⭕️“了解自己，接纳自己，把重要的事情作为中心，然后一步一步积极行动。”</strong></p><p><strong>⭕️“不要试图通过改变他人来获得快乐，而是想“自己如何做才会快乐”或“怎么努力让自己在这里心情愉快地度过”，我觉得这才是应该考虑的关键。”</strong></p><p><strong>⭕️“在别人的行为没有达到自己的期待时，我希望你不要感到孤独或伤心。”</strong></p><div class="note info"><p>211125</p></div><p><strong>⭕️“不要认为别人的给予理所当然，感谢你所得到的，并且不再奢求更多”</strong></p><p><strong>⭕️“心灵的沟通，其实就是把自己放到与对方平等的位置上，倾听对方的内心世界。”</strong></p><p><strong>⭕️“如果有一种人际关系能让你安心地暴露自己的脆弱之处，那么你一定会精神满满。”</strong></p><p><strong>⭕️“在我看来，人际关系如同河流，我遇到的很多善良、快乐的人汇聚在我的生命中。对我而言，能够与这些人相处，是我人生无尽的宝藏。”</strong> </p><p><strong>⭕️“忧虑未来于事无补，谁也无法预料未来”</strong></p><p><strong>⭕️“与其追求完美而挫折不断，不如以笨拙的方式坚持下去。”</strong></p><p><strong>⭕️“育儿基本的原则是，对待大人和孩子一视同仁。”</strong></p><p><strong>⭕️“育儿过程，就是让自己越发优秀的成长过程。养育孩子，也是成长。”</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://m.media-amazon.com/images/I/51PvwYuhqbL._SY346_.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者: &lt;a href=&quot;https://book.doub
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统模型之DIN</title>
    <link href="http://yoursite.com/2021/09/16/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B%E4%B9%8BDIN/"/>
    <id>http://yoursite.com/2021/09/16/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B%E4%B9%8BDIN/</id>
    <published>2021-09-16T01:32:39.000Z</published>
    <updated>2021-09-16T09:58:53.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推荐系统模型之DIN"><a href="#推荐系统模型之DIN" class="headerlink" title="推荐系统模型之DIN"></a>推荐系统模型之DIN</h1><p><strong>Deep Interest Network(DIN)</strong>由阿里妈妈的精准定向检索及基础算法团队在2017年6月提出。 它针对电子商务领域(e-commerce industry)的CTR预估，重点在于<strong>充分利用/挖掘用户历史行为数据中的信息</strong>。</p><p><a href="https://arxiv.org/pdf/1706.06978.pdf" target="_blank" rel="noopener">论文地址</a></p><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><h3 id="针对问题"><a href="#针对问题" class="headerlink" title="针对问题"></a>针对问题</h3><p>第一个问题是目前很多推荐系统模型，都是以 Embedding &amp; MLP 的方法结合，这种方法相对传统机器学习有较好的效果提升，但是存在一些缺点</p><ul><li><p>用户的兴趣通常是多种多样的，而 Embedding &amp; MLP 方法中有限的向量维度会成为用户多样化兴趣的瓶颈，如果扩大向量维度会极大地增加学习参数和计算负荷，并增加过拟合风险；</p></li><li><p>不需要将用户的所有兴趣都压缩到同一个向量中。比如用户购买了泳镜并不是因为上周购买了鞋子，而是因为之前购买了泳衣</p></li></ul><p>第二个问题，训练具有大规模稀疏特征网络时面临非常大的挑战，比如基于 SGD 的优化方法可以采用 Mini-Batch 来更新参数，但加上 L2 正则化后其计算量会非常大，因为每个 Mini-Batch 都需要计算所有参数的 L2 范式</p><h3 id="提出方案"><a href="#提出方案" class="headerlink" title="提出方案"></a>提出方案</h3><p>针对这些问题，DIN 模型通过考虑给定候选广告的历史行为的相关性，自适应地计算用户兴趣的表示向量。通过引入<strong>Attention机制</strong>来实现局部激活单元，DIN 模型通过软搜索历史行为的相关部分来关注相关的用户兴趣，并采用加权总和池化来获取有关候选广告的用户兴趣的表示形式。与候选广告相关性更高的行为会获得更高的激活权重，并且支配着用户兴趣。这样用户的兴趣表示向量就会随着广告的不同而变化，从而提高了模型在有限尺寸下的表达能力，并使得模型能够更好地捕获用户的不同兴趣。</p><p>同时作者提出了一个Mini-batch Aware Regularization方法，可以只计算非零特征参数的 L2 范式。此外还考虑了输入数据的分布，设计了数据自适应激活函数Dice，显著提升了模型性能与收敛速度</p><h2 id="特征设计"><a href="#特征设计" class="headerlink" title="特征设计"></a>特征设计</h2><p>论文中作者把特征分为四大类：用户特征、用户行为特征、广告特征、上下文特征，并<strong>没有进行特征组合/交叉特征</strong>。而是通过DNN去学习特征间的交互信息</p><p><img src="https://img-blog.csdnimg.cn/381b9d0ea94a4ee59a31c78c4c663310.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><h3 id="基准模型"><a href="#基准模型" class="headerlink" title="基准模型"></a>基准模型</h3><p>基准模型结构主要由 Embedding 和 MLP 构成<br><img src="https://img-blog.csdnimg.cn/85adb2356c7c49c58e7626f68eaf6614.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>基准模型的一个缺点在于对用户兴趣多样化的表达受限。</p><p>基准模型直接通过池化所有的 Embedding 向量来获的一个定长的表示向量。由于表示向量长度固定，表达受到一定的限制，假设最多可以表示 k 个独立的兴趣爱好，如果用户兴趣广泛不止 k 个则表达受限，极大的限制了用户兴趣多样化的表达，而如果扩大向量维度则会带来巨大的计算量和过拟合的风险。</p><p>同时在基准模型中，用户行为特征经过简单的池化操作后就送到下一层训练，对于行为中的商品没有区分重要程度，也和广告特征的中的商品没有联系，事实上广告特征和用户特征的关联程度非常强。在建模过程中投给不同特征的注意力应该有所不用，而注意力的得分的计算体现了与广告特征的相关性。</p><p>利用候选商品和历史行为为商品之间的相关性计算出一个权重，这个权重久代表了注意力的强弱，在加入了注意力权重后的模型就是DIN</p><h3 id="DIN模型"><a href="#DIN模型" class="headerlink" title="DIN模型"></a>DIN模型</h3><p><img src="https://img-blog.csdnimg.cn/a2299830cce34bc7a29a52bbb246fcfb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>DIN模型模仿了注意力机制的过程，即以给定的广告为出发点，关注相关联的历史行为，在此基础上，DIN会自适应地计算用户兴趣的表示向量，这使得在不同的广告上，这个表达向量也会不同</p><p>用户的兴趣表示计算如下</p><script type="math/tex; mode=display">v_{U}(A)=f\left(v_{A}, e_{1}, e_{2}, \ldots, e_{H}\right)=\sum_{j=1}^{H} a\left(e_{j}, v_{A}\right) e_{j}=\sum_{j=1}^{H} w_{j} e_{j}</script><p>其中$f\left(v<em>{A}, e</em>{1}, e<em>{2}, \ldots, e</em>{H}\right)$表示长度为H的用户U的用户行为嵌入向</p><p>$V_A$ 是广告A的embedding vector，这样$V_u(A)$ 随着广告的不同而变化（长度不变，依旧为H)</p><p>传统的attention需要对所有的分数通过softmax做归一化，这样做有两个好处，一是保证权重非负，二是保证权重之和为1。但是在DIN中不对点击序列的attention分数做归一化，直接将分数与对应商品的embedding向量做加权和，目的在于保留用户的兴趣强度。例如，用户的点击序列中90%是衣服，10%是电子产品，有一件T恤和一部手机需要预测CTR，那么T恤会激活大部分的用户行为，使得根据T恤计算出来的用户行为向量在数值上相对手机而言更大。</p><h2 id="训练手段"><a href="#训练手段" class="headerlink" title="训练手段"></a>训练手段</h2><h3 id="Mini-batch-感知正则化"><a href="#Mini-batch-感知正则化" class="headerlink" title="Mini-batch 感知正则化"></a>Mini-batch 感知正则化</h3><p>CTR中输入稀疏而且维度高，通常的做法是加入L1、L2防止过拟合，但这种正则方式对于工业级CTR数据不适用，结合其稀疏性及上亿级的参数，以L2正则化为例，需要计算每个mini-batch下所有参数的L2，计算量太大，不可接受。</p><p>阿里提出了<strong>自适应正则</strong>的做法</p><ul><li>针对feature id出现的频率，来自适应的调整他们正则化的强度。对于出现频率高的，给与较小的正则化强度，对于出现频率低的，给予较大的正则化强度</li><li>只计算mini-batch中非零项的L2-norm</li></ul><h3 id="数据自适应激活函数"><a href="#数据自适应激活函数" class="headerlink" title="数据自适应激活函数"></a>数据自适应激活函数</h3><p>ReLU =&gt; PReLU =&gt; Dice</p><p>PReLU其实是ReLU的改良版，由于ReLU在x小于0的时候，梯度为0，可能导致网络停止更新，PReLU对整流器的左半部分形式进行了修改，使得x小于0时输出不为0。 研究表明，PReLU能提高准确率但是也稍微增加了过拟合的风险。PReLU形式如下：</p><script type="math/tex; mode=display">f(s)=\left\{\begin{array}{ll}s, & \text { if } s>0 \\\alpha s, & \text { if } s \leq 0\end{array}=p(s) \cdot s+(1-p(s)) \cdot \alpha s\right.</script><p>PReLU函数以0点作为控制转折点，这对于输入层具有不同分布的情况不适用，因此，论文设计了一种新型数据自适应激活函数<strong>Dice</strong></p><p>主要思想是依据输入数据分布进行自适应调整修正点，该修正点不再默认为0，而是设定为数据均值。其次，Dice的一个好处是平滑过渡两个状态</p><script type="math/tex; mode=display">f(s)=p(s) \cdot s+(1-p(s)) \cdot \alpha s, p(s)=\frac{1}{1+e^{-\frac{s-E[s]}{V a r[s]+\epsilon}}}</script><p>在训练阶段， $E[s]$和  $Var[s]$是每个mini-batch 的平均值和方差，在测试阶段，$E[s]$和  $Var[s]$随着数据进行移动，$\epsilon$是一个小常数项，设定为 $10^{-8}$</p><p>当 $E[s]=0$ and $Var[s]=0$ 时，Dice退化为 PReLU</p><p><img src="https://img-blog.csdnimg.cn/3c86c50086044571b9630ed24e41925e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong><a href="https://github.com/BENULL/RecModel/tree/master/din" target="_blank" rel="noopener">Github仓库地址</a></strong></p><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DIN</span><span class="params">(Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, feature_columns, att_hidden_units=<span class="params">(<span class="number">80</span>, <span class="number">40</span>)</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 dnn_hidden_units=<span class="params">(<span class="number">80</span>, <span class="number">40</span>)</span>, att_activation=<span class="string">'prelu'</span>, dnn_activation=<span class="string">'prelu'</span>, dnn_dropout=<span class="number">0.</span>,)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        DIN</span></span><br><span class="line"><span class="string">        :param feature_columns: A list. dense_feature_columns + sparse_feature_columns</span></span><br><span class="line"><span class="string">        :param att_hidden_units: A tuple or list. Attention hidden units.</span></span><br><span class="line"><span class="string">        :param dnn_hidden_units: A tuple or list. Hidden units list of FFN.</span></span><br><span class="line"><span class="string">        :param att_activation: A String. The activation of attention.</span></span><br><span class="line"><span class="string">        :param dnn_activation: A String. Prelu or Dice.</span></span><br><span class="line"><span class="string">        :param dnn_dropout: A scalar. The number of Dropout.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(DIN, self).__init__()</span><br><span class="line">        self.candidate_layer = tf.keras.layers.DenseFeatures(feature_columns[<span class="string">'candidate_col'</span>])</span><br><span class="line">        self.user_behaviors_layer = tf.keras.layers.DenseFeatures(feature_columns[<span class="string">'behavior_col'</span>])</span><br><span class="line">        self.behaviors_nums = len(feature_columns[<span class="string">'behavior_col'</span>])</span><br><span class="line">        self.user_profile_layer = tf.keras.layers.DenseFeatures(feature_columns[<span class="string">'user_profile'</span>])</span><br><span class="line">        self.context_features_layer = tf.keras.layers.DenseFeatures(feature_columns[<span class="string">'context_features'</span>])</span><br><span class="line"></span><br><span class="line">        self.attention_layer = AttentionLayer(len(feature_columns[<span class="string">'behavior_col'</span>]),</span><br><span class="line">                                              att_hidden_units, activation=att_activation)</span><br><span class="line"></span><br><span class="line">        self.bn = BatchNormalization(trainable=<span class="literal">True</span>)</span><br><span class="line">        self.dnn_network = DNN(dnn_hidden_units, dnn_activation, dnn_dropout)</span><br><span class="line">        self.output_layer = Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        candidate_emb = self.candidate_layer(inputs)  <span class="comment"># (None, d)</span></span><br><span class="line">        user_behaviors_emb = self.user_behaviors_layer(inputs)  <span class="comment"># (None, lens_k*d)</span></span><br><span class="line">        user_behaviors_emb = Reshape((self.behaviors_nums, <span class="number">-1</span>))(user_behaviors_emb)</span><br><span class="line">        user_profile_emb = self.user_profile_layer(inputs)</span><br><span class="line">        context_features_emb = self.context_features_layer(inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># attention</span></span><br><span class="line">        activation_unit = self.attention_layer((candidate_emb, user_behaviors_emb,))</span><br><span class="line">        all_input = tf.concat([activation_unit, user_profile_emb, context_features_emb], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        all_out = self.bn(all_input)</span><br><span class="line">        dnn_out = self.dnn_network(all_out)</span><br><span class="line">        outputs = self.output_layer(dnn_out)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttentionLayer</span><span class="params">(Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, keys_dim, att_hidden_units, activation=<span class="string">'prelu'</span>)</span>:</span></span><br><span class="line">        super(AttentionLayer, self).__init__()</span><br><span class="line">        self.keys_dim = keys_dim</span><br><span class="line">        self.att_dense = [Dense(units=unit, activation=PReLU() <span class="keyword">if</span> activation == <span class="string">'prelu'</span> <span class="keyword">else</span> Dice())</span><br><span class="line">                          <span class="keyword">for</span> unit <span class="keyword">in</span> att_hidden_units]</span><br><span class="line">        self.att_final_dense = Dense(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># query: candidate item  (None, d), d is the dimension of embedding</span></span><br><span class="line">        <span class="comment"># key: hist items  (None, lens_k, d)</span></span><br><span class="line">        q, k = inputs</span><br><span class="line">        <span class="comment">#           (None, d) =&gt; (None, 1, d)</span></span><br><span class="line">        q = tf.tile(tf.expand_dims(q, <span class="number">1</span>), [<span class="number">1</span>, tf.shape(k)[<span class="number">1</span>], <span class="number">1</span>])  <span class="comment"># (None, lens_k, d)</span></span><br><span class="line">        din_all = tf.concat([q, k, q-k, q*k], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dense</span></span><br><span class="line">        outputs = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> dense <span class="keyword">in</span> self.att_dense:</span><br><span class="line">            outputs = dense(din_all)</span><br><span class="line">        outputs = tf.transpose(self.att_final_dense(outputs), [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])  <span class="comment"># (None, 1, lens_k)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># key_masks = tf.sequence_mask(keys_length, max(keys_length), dtype=tf.bool)  # (None, lens_k)</span></span><br><span class="line">        <span class="comment"># key_masks = tf.expand_dims(key_masks, 1)  # (None, 1, lens_k)</span></span><br><span class="line">        <span class="comment"># paddings = tf.ones_like(outputs) * (-2 ** 32 + 1)  # (None, 1, lens_k)</span></span><br><span class="line">        <span class="comment"># outputs = tf.where(key_masks, outputs, paddings)  # (None, lens_k, 1, max(lens_k))</span></span><br><span class="line">        <span class="comment"># outputs = outputs / (self.keys_dim ** 0.5)  # (None, lens_k, 1, max(lens_k))</span></span><br><span class="line"></span><br><span class="line">        outputs = tf.keras.activations.sigmoid(outputs)  <span class="comment"># (None, 1, lens_k)</span></span><br><span class="line"></span><br><span class="line">        outputs = tf.matmul(outputs, k)  <span class="comment"># (None, 1, lens_k) matmul (None, lens_k, d)   = (None, 1, d)</span></span><br><span class="line">        outputs = tf.squeeze(outputs, axis=<span class="number">1</span>)  <span class="comment"># (None,  d)</span></span><br><span class="line">        <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dice</span><span class="params">(Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Dice, self).__init__()</span><br><span class="line">        self.bn = BatchNormalization(center=<span class="literal">False</span>, scale=<span class="literal">False</span>)</span><br><span class="line">        self.alpha = self.add_weight(shape=(), dtype=tf.float32, name=<span class="string">'alpha'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        x = inputs</span><br><span class="line">        x_normed = self.bn(x)</span><br><span class="line">        x_p = tf.sigmoid(x_normed)</span><br><span class="line">        <span class="keyword">return</span> self.alpha * (<span class="number">1.0</span> - x_p) * x + x_p * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNN</span><span class="params">(Layer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dnn_hidden_units, dnn_activation=<span class="string">'prelu'</span>, dnn_dropout=<span class="number">0.</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Deep Neural Network</span></span><br><span class="line"><span class="string">        :param dnn_hidden_units: A list. Neural network hidden units.</span></span><br><span class="line"><span class="string">        :param dnn_activation: A string. Activation function of dnn.</span></span><br><span class="line"><span class="string">        :param dnn_dropout: A scalar. Dropout number.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(DNN, self).__init__()</span><br><span class="line">        self.dnn_network = [Dense(units=unit, activation=PReLU() <span class="keyword">if</span> dnn_activation == <span class="string">'prelu'</span> <span class="keyword">else</span> Dice()) </span><br><span class="line">                            <span class="keyword">for</span> unit <span class="keyword">in</span> dnn_hidden_units]</span><br><span class="line">        self.dropout = Dropout(dnn_dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        x = inputs</span><br><span class="line">        <span class="keyword">for</span> dnn <span class="keyword">in</span> self.dnn_network:</span><br><span class="line">            x = dnn(x)</span><br><span class="line">        x = self.dropout(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>深度学习推荐系统-王喆</li><li><a href="https://zhuanlan.zhihu.com/p/42934748" target="_blank" rel="noopener">CTR论文精读(八)—DIN for Click-Through Rate Prediction</a></li><li><a href="https://blog.51cto.com/azelearining/3178369" target="_blank" rel="noopener">DIN：阿里深度兴趣网络</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;推荐系统模型之DIN&quot;&gt;&lt;a href=&quot;#推荐系统模型之DIN&quot; class=&quot;headerlink&quot; title=&quot;推荐系统模型之DIN&quot;&gt;&lt;/a&gt;推荐系统模型之DIN&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Deep Interest Network(DIN)&lt;/st
      
    
    </summary>
    
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
      <category term="Paper" scheme="http://yoursite.com/tags/Paper/"/>
    
      <category term="Recommendation" scheme="http://yoursite.com/tags/Recommendation/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记——挪威的森林</title>
    <link href="http://yoursite.com/2021/09/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8C%AA%E5%A8%81%E7%9A%84%E6%A3%AE%E6%9E%97/"/>
    <id>http://yoursite.com/2021/09/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8C%AA%E5%A8%81%E7%9A%84%E6%A3%AE%E6%9E%97/</id>
    <published>2021-09-14T11:28:45.000Z</published>
    <updated>2021-12-20T04:45:29.457Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.cn/images/I/31yqIJGzEFL._SY346_.jpg" align="center"></p><blockquote><p>作者: <a href="https://book.douban.com/author/4502361/" target="_blank" rel="noopener">[日] 村上春树</a><br>出版社: 上海译文出版社<br>原作名: ノルウェイの森<br>译者: <a href="https://book.douban.com/author/4502363/" target="_blank" rel="noopener">林少华</a><br>出版年: 2001-2<br>ISBN: 9787532725694</p></blockquote><div class="note info"><p>210510</p></div><p><strong>⭕️“一种生活模式，一种人生态度：把玩孤独，把玩无奈。”</strong></p><p><strong>⭕️“想到这里，我悲哀得难以自禁。因为，直子连爱都没爱过我。”</strong></p><div class="note info"><p>210528</p></div><p><strong>⭕️“她的笑脸——尽管稍纵即逝——实在是久违了”</strong></p><p><strong>⭕️“谁都想表现自己，而又不能表现得确切，以致焦躁不安。”</strong></p><p><strong>⭕️“我们两人漫无目标地在东京街头走来转去，上坡，过河，穿铁道口，只管走个没完。没有明确的目的地，反正走路即可。仿佛举行某种拯救灵魂的宗教仪式一般，我们专心致志地大走特走。下雨就撑伞走。”</strong> </p><p><strong>⭕️“头发一下变短，觉得什么保护层都没有了似的。就像赤身裸体地被扔到人堆里，心里慌得不行，所以才戴这太阳镜。”</strong></p><p><strong>⭕️“哪里会有人喜欢孤独，不过是不喜欢失望。”</strong></p><p><strong>⭕️“绅士就是：所做的，不是自己想做之事，而是自己应做之事。”</strong></p><div class="note info"><p>210530</p></div><p><strong>⭕️“我帮她洗碗，站在她旁边，把她洗过的碗用毛巾擦干，放在烹调台上。”</strong></p><p><strong>⭕️“在九月间这个令人心神荡漾的下午，每个人看来都自得其乐，而我则因此而感到了平时所没有感到过的孤寂，觉得惟独我自己与这光景格格不入”</strong></p><div class="note info"><p>210601</p></div><p><strong>⭕️“我不是那样的强者，也并不认为不被任何人理解也无所谓，希望相互理解的对象也是有的。只不过对除此以外的人，觉得在某种程度上即使不被理解也无可奈何，这是不可强求的事。”</strong></p><p><strong>⭕️“人理解某人是水到渠成的事，并非某人希望对方理解所使然”</strong></p><div class="note info"><p>210602</p></div><p><strong>⭕️“我则几乎没有抬头，日复一日地打发时光。在我眼里，只有漫无边际的泥沼。往前落下右脚，拔起左脚，再拔起右脚。我判断不出我位于何处，也不具有自己是在朝正确方向前进的信心。我之所以一步步挪动步履，只是因为我必须挪动，而无论去哪里”</strong></p><p><strong>⭕️“不要同情自己！”他说，“同情自己是卑劣懦夫干的勾当。”</strong></p><p><strong>⭕️“饼干罐不是装有各种各样的饼干，喜欢的和不大喜欢的都在里面吗？如果先一个劲儿挑你喜欢的吃，那么剩下的就全是不大喜欢的。每次遇到麻烦我就总这样想：先把这个应付过去，往下就好办了。人生就是饼干罐。”</strong></p><div class="note info"><p>210603</p></div><p><strong>⭕️“这并非什么罪过，只不过是大千世界里司空见惯之事。在风和日丽的天气里荡舟于美丽的湖面，我们会既觉得蓝天迷人，又深感湖水多娇——二者同一道理。不必那么苦恼。纵令听其自然，世事的长河也还是要流往其应流的方向，而即使再竭尽人力，该受伤害的人也无由幸免。所谓人生便是如此。这样说未免大言不惭——你也差不多到了学习这种人生方式的年龄。有时候你太急于将人生纳入自己的轨道。假如你不想进精神病院，就要心胸豁达地委身于生活的河流。”</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://images-cn.ssl-images-amazon.cn/images/I/31yqIJGzEFL._SY346_.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者: &lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统模型之DeepFM</title>
    <link href="http://yoursite.com/2021/09/12/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B%E4%B9%8BDeepFM/"/>
    <id>http://yoursite.com/2021/09/12/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B%E4%B9%8BDeepFM/</id>
    <published>2021-09-12T05:37:45.000Z</published>
    <updated>2021-09-12T07:13:33.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推荐系统模型之DeepFM"><a href="#推荐系统模型之DeepFM" class="headerlink" title="推荐系统模型之DeepFM"></a>推荐系统模型之DeepFM</h1><p><a href="https://arxiv.org/pdf/1703.04247.pdf" target="_blank" rel="noopener">DeepFM: A Factorization-Machine based Neural Network for CTR Prediction</a>是华为和哈工大在2017发表的论文，在Wide&amp;Deep结构的基础上，使用FM取代Wide部分的LR，不需要再做复杂的特征工程，可以直接把原始数据输入模型。</p><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>DeepFM=DNN+FM</p><p>因子分解机(Factorization Machines,FM)，具有自动学习交叉特征的能力，避免了Wide &amp; Deep模型中浅层部分人工特征工程的工作，通过对每一维特征的隐变量内积来提取特征。理论上FM可以对比二阶更高阶的特征组合进行建模，实际上由于计算复杂度的原因，一般只用到二阶特征组合。</p><p>而对于高阶的特征组合，很自然想到利用DNN。但是稀疏的One-Hot特征会导致网络参数过多，通过将特征分为不同的field送入dense层，得到高阶特征的组合。</p><p>最终将低阶组合特征单独建模，然后融合高阶组合特征，就是DeepFM了。</p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p><img src="https://img-blog.csdnimg.cn/05d9a01770f24a068523c0397baa8299.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>这个模型分为<strong>FM部分和Deep部分</strong>，和Wide &amp; Deep模型不同的是，DeepFM两部分共享原始输入特征</p><script type="math/tex; mode=display">\hat{y}=\operatorname{sigmoid}\left(y_{F M}+y_{D N N}\right)</script><p>在输入特征部分，由于原始特征向量大多是高度稀疏的连续和类别混合的分域特征，为了更好的发挥DNN模型学习高阶特征的能力，文中设计了一套子网络结构，将原始的稀疏表示特征映射为稠密的特征向量。</p><p>子网络设计时的两个要点：</p><ol><li>不同field特征长度可以不同，但是子网络输出embedding向量需具有相同维度k；</li><li>利用FM模型的隐特征向量V作为网络权重初始化来获得子网络输出的embedding向量</li></ol><p><img src="https://img-blog.csdnimg.cn/9d6c863a17324cb7a33940add5aaf43b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>这里要注意的一点是，在一些其他DNN做CTR预估的论文当中，会使用预训练的FM模型来进行Deep部分的向量初始化。文中的做法不同，它不是使用训练好的FM来进行初始化，而是和FM模型的部分共享同样的V，将FM和DNN进行整体联合训练，从而实现了一个端到端的模型。</p><p>这样做有两个好处</p><ol><li>它可以同时学习到低维以及高维的特征交叉信息，预训练的FM来进行向量初始化得到的embedding当中可能只包含了二维交叉的信息。</li><li>这样可以避免像是Wide &amp; Deep那样多余的特征工程。</li></ol><h3 id="FM-Factorization-Machines"><a href="#FM-Factorization-Machines" class="headerlink" title="FM (Factorization Machines)"></a>FM (Factorization Machines)</h3><p>FM主要是解决稀疏数据下的特征组合问题，并且其预测的复杂度是线性的，对于连续和离散特征有较好的通用性。<br><a href="https://www.csie.ntu.edu.tw/~b97053/paper/Rendle2010FM.pdf" target="_blank" rel="noopener">FM论文地址</a><br>下面是FM二阶部分的数学形式。FM为每个特征学习了一个隐权重向量。在特征交叉时，使用两个向量的内积$\left\langle V<em>{i}, V</em>{j}\right\rangle$作为交叉特征的权重。</p><script type="math/tex; mode=display">y_{F M}=\langle w, x\rangle+\sum_{j_{1}=1}^{d} \sum_{j_{2}=j_{1}+1}^{d}\left\langle V_{i}, V_{j}\right\rangle x_{j_{1}} \cdot x_{j_{2}}</script><p>本质上,FM引入隐向量的做法，与矩阵分解用隐向量代表用户和物品的做法异曲同工。可以说，FM是将矩阵分解隐向量的思想进行了进一步扩展，从单纯的用户、物品隐向量扩展到了所有特征上。</p><p>在工程方面,FM同样可以用梯度下降法进行学习，使其不失实时性和灵活性。相比之后深度学习模型复杂的网络结构导致难以部署和线上服务，FM较容易实现的模型结构使其线上推断的过程相对简单，也更容易进行线上部署和服务。因此，FM在2012一2014年前后，成为业界主流的推荐模型之一。</p><p><strong>FM模型优势</strong></p><ul><li><p>在高度稀疏的情况下特征之间的交叉仍然能够估计，而且可以泛化到未被观察的交叉</p></li><li><p>参数的学习和模型的预测的时间复杂度是线性的</p></li></ul><p>FM更详细介绍见<a href="https://zhuanlan.zhihu.com/p/50426292" target="_blank" rel="noopener">FM（Factorization Machines）的理论与实践</a></p><h4 id="FM部分"><a href="#FM部分" class="headerlink" title="FM部分"></a>FM部分</h4><p><img src="https://img-blog.csdnimg.cn/7bbf27202d574683a96076bdc8c46d02.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>在实践中，FM模块最终是将一阶项与二阶项进行了简单concat。</p><p>上图中的Field为特征组，例如性别属性可以看做是一个Field，其有两个特征分别为“男”、“女”。通常来说一个Field中往往只有一个非零特征，但也有可能为多值Field，需要根据实际输入进行适配。</p><p>上图的图例中展示了三种颜色的线条，其中绿色的箭头表示为特征的Embedding过程，即得到特征对应的Embedding vector，通常使用 $v_ix_i$ 来表示，而其中的隐向量$v_i$ 则是通过模型学习得到的参数。红色箭头表示权重为1的连接，也就是说红色箭头并不是需要学习的参数。而黑色连线则表示为正常的，需要模型学习的参数$w_i$。</p><h2 id="Deep"><a href="#Deep" class="headerlink" title="Deep"></a>Deep</h2><p>Deep部分就是经典的<strong>前馈网络DNN</strong>，用来学习特征之间的高维交叉。<br><img src="https://img-blog.csdnimg.cn/d0349d46fcef422c9be178b89055fd0e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong><a href="https://github.com/BENULL/RecModel/tree/master/deepfm" target="_blank" rel="noopener">Github仓库地址</a></strong></p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeepFM</span><span class="params">(Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, linear_feature_columns, dnn_feature_columns, dnn_hidden_units=<span class="params">(<span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>)</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 l2_linear_reg=<span class="number">1e-6</span>, dnn_activation=<span class="string">'relu'</span>, dnn_dropout=<span class="number">0.</span>, )</span>:</span></span><br><span class="line">        super(DeepFM, self).__init__()</span><br><span class="line">        self.linear_feature_columns = linear_feature_columns</span><br><span class="line">        self.dnn_feature_columns = dnn_feature_columns</span><br><span class="line">        self.embedding = DenseFeatures(self.linear_feature_columns)</span><br><span class="line">        self.dense_feature = DenseFeatures(self.dnn_feature_columns)</span><br><span class="line">        self.linear = Linear(use_bias=<span class="literal">True</span>, l2_linear_reg=l2_linear_reg)</span><br><span class="line">        self.reshape = Reshape((len(self.linear_feature_columns), <span class="number">-1</span>))</span><br><span class="line">        self.fm = FM()</span><br><span class="line">        self.dnn_network = DNN(dnn_hidden_units, dnn_activation, dnn_dropout)</span><br><span class="line">        self.output_layer = Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># first order term</span></span><br><span class="line">        embeddings = self.embedding(inputs)</span><br><span class="line">        first_order = self.linear(embeddings)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># second order term</span></span><br><span class="line">        embed_inputs = self.reshape(embeddings)</span><br><span class="line">        second_order = self.fm(embed_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dnn term</span></span><br><span class="line">        dnn_inputs = self.dense_feature(inputs)</span><br><span class="line">        dnn_inputs = concatenate([embeddings, dnn_inputs])</span><br><span class="line">        dnn_out = self.dnn_network(dnn_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># out</span></span><br><span class="line">        both = concatenate([first_order, second_order, dnn_out])</span><br><span class="line">        outputs = self.output_layer(both)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FM</span><span class="params">(Layer)</span>:</span></span><br><span class="line">    <span class="string">"""Factorization Machine models pairwise (order-2) feature interactions</span></span><br><span class="line"><span class="string">     without linear term and bias.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Input shape</span></span><br><span class="line"><span class="string">        - 3D tensor with shape: ``(batch_size,field_size,embedding_size)``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Output shape</span></span><br><span class="line"><span class="string">        - 2D tensor with shape: ``(batch_size, 1)``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      References</span></span><br><span class="line"><span class="string">        - [Factorization Machines](https://www.csie.ntu.edu.tw/~b97053/paper/Rendle2010FM.pdf)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(FM, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> K.ndim(inputs) != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(</span><br><span class="line">                <span class="string">"Unexpected inputs dimensions %d, expect to be 3 dimensions"</span></span><br><span class="line">                % (K.ndim(inputs)))</span><br><span class="line"></span><br><span class="line">        concated_embeds_value = inputs</span><br><span class="line">        square_of_sum = tf.square(tf.reduce_sum(concated_embeds_value, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line">        sum_of_square = tf.reduce_sum(concated_embeds_value * concated_embeds_value, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">        cross_term = square_of_sum - sum_of_square</span><br><span class="line">        cross_term = <span class="number">0.5</span> * tf.reduce_sum(cross_term, axis=<span class="number">2</span>, keepdims=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> cross_term</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(input_shape) != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Unexpected inputs dimensions % d,\</span></span><br><span class="line"><span class="string">                             expect to be 3 dimensions"</span> % (len(input_shape)))</span><br><span class="line"></span><br><span class="line">        super(FM, self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_output_shape</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span><span class="params">(Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, use_bias=False, l2_linear_reg=<span class="number">1e-6</span>)</span>:</span></span><br><span class="line">        super(Linear, self).__init__()</span><br><span class="line">        self.use_bias = use_bias</span><br><span class="line">        self.l2_reg_linear = l2_linear_reg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.use_bias:</span><br><span class="line">            self.bias = self.add_weight(name=<span class="string">'linear_bias'</span>,</span><br><span class="line">                                        shape=(<span class="number">1</span>,),</span><br><span class="line">                                        initializer=tf.keras.initializers.Zeros(),</span><br><span class="line">                                        trainable=<span class="literal">True</span>)</span><br><span class="line">        super(Linear, self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        linear_logit = tf.reduce_sum(inputs, axis=<span class="number">-1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> self.use_bias:</span><br><span class="line">            linear_logit += self.bias</span><br><span class="line">        <span class="keyword">return</span> linear_logit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNN</span><span class="params">(Layer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dnn_hidden_units, dnn_activation=<span class="string">'relu'</span>, dnn_dropout=<span class="number">0.</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Deep Neural Network</span></span><br><span class="line"><span class="string">        :param dnn_hidden_units: A list. Neural network hidden units.</span></span><br><span class="line"><span class="string">        :param dnn_activation: A string. Activation function of dnn.</span></span><br><span class="line"><span class="string">        :param dnn_dropout: A scalar. Dropout number.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(DNN, self).__init__()</span><br><span class="line">        self.dnn_network = [Dense(units=unit, activation=dnn_activation) <span class="keyword">for</span> unit <span class="keyword">in</span> dnn_hidden_units]</span><br><span class="line">        self.dropout = Dropout(dnn_dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        x = inputs</span><br><span class="line">        <span class="keyword">for</span> dnn <span class="keyword">in</span> self.dnn_network:</span><br><span class="line">            x = dnn(x)</span><br><span class="line">        x = self.dropout(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>深度学习推荐系统——王喆</li><li><a href="https://zhuanlan.zhihu.com/p/248895172" target="_blank" rel="noopener">深入浅出DeepFM</a></li><li><a href="https://zhuanlan.zhihu.com/p/57873613" target="_blank" rel="noopener">深度推荐模型之DeepFM</a></li><li><a href="https://www.cnblogs.com/techflow/p/14260630.html" target="_blank" rel="noopener">吃透论文——推荐算法不可不看的DeepFM模型</a></li><li><a href="https://github.com/ZiyaoGeng/Recommender-System-with-TF2.0/tree/master/DeepFM" target="_blank" rel="noopener">Recommender-System-with-TF2.0</a></li><li>DeepCTR</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;推荐系统模型之DeepFM&quot;&gt;&lt;a href=&quot;#推荐系统模型之DeepFM&quot; class=&quot;headerlink&quot; title=&quot;推荐系统模型之DeepFM&quot;&gt;&lt;/a&gt;推荐系统模型之DeepFM&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://arxiv.org
      
    
    </summary>
    
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
      <category term="Paper" scheme="http://yoursite.com/tags/Paper/"/>
    
      <category term="Recommendation" scheme="http://yoursite.com/tags/Recommendation/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统模型之Wide&amp;Deep</title>
    <link href="http://yoursite.com/2021/09/08/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B%E4%B9%8BWide&amp;Deep/"/>
    <id>http://yoursite.com/2021/09/08/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B%E4%B9%8BWide&amp;Deep/</id>
    <published>2021-09-08T11:42:25.000Z</published>
    <updated>2021-09-12T06:18:12.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推荐系统模型之Wide-amp-Deep"><a href="#推荐系统模型之Wide-amp-Deep" class="headerlink" title="推荐系统模型之Wide&amp;Deep"></a>推荐系统模型之Wide&amp;Deep</h1><p>Wide&amp;Deep 简称WDL，是2016年Google 发表得一篇论文《Wide &amp; Deep Learning for Recommender Systems》提出的推荐框架。</p><p>Wide&amp;Deep 模型由单层的 Wide 部分和多层的 Deep部分组成。这样的组合使得模型兼具了逻辑回归和深度神经网络的优点，能够快速处理并记忆大量历史行为特征, 并且具有强大的表达能力, 不仅在当时迅速成为业界争相应用的主流模型, 而且衍生出了大量以Wide\&amp;Deep 模型为基础结构的混合模型, 影响力一直延续到至今。</p><p><a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1606.07792.pdf" target="_blank" rel="noopener">论文地址</a></p><h2 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h2><p>Wide&amp;Deep围绕着“记忆”(Memorization)与“泛化”(Generalization)两个词展开<br><strong>记忆能力可以理解为模型直接学习并利用（exploiting）历史数据中物品或者特征的共现频率的能力</strong><br><strong>泛化能力可以理解为模型传递特征的相关性以及发掘（exploring）稀有特征和最终标签相关性的能力</strong></p><p><strong>Wide部分通过线性模型处理历史行为特征，有利于增强模型的记忆能力，但依赖人工进行特征组合的筛选</strong><br><strong>Deep部分通过embedding进行学习，对特征的自动组合，挖掘数据中的潜在模式有利于增强模型的泛化能力</strong></p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p><img src="https://img-blog.csdnimg.cn/f436882d44b142878eca236155f33562.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h3 id="Wide部分"><a href="#Wide部分" class="headerlink" title="Wide部分"></a>Wide部分</h3><p>Wide部分善于处理稀疏类的特征，是个广义线性模型</p><script type="math/tex; mode=display">y=W^TX+b</script><p>$X$特征部分包括基础特征和交叉特征，其中交叉特征可起到添加非线性的作用。</p><h4 id="交叉特征"><a href="#交叉特征" class="headerlink" title="交叉特征"></a>交叉特征</h4><p>文中提到过的特征变换为交叉乘积变换（cross-product transformation）</p><script type="math/tex; mode=display">\phi_{k}(\mathbf{x})=\prod_{i=1}^{d} x_{i}^{c_{k i}} \quad c_{k i} \in\{0,1\}</script><p>$C_{ki}$是一个布尔变量，当$i$个特征属于第$k$个特征组合时，值为1，否则为0。</p><p>例如对于特征组合”AND(gender=female, language=en)”，如果对应的特征“gender=female” 和“language=en”都符合，则对应的交叉积变换层结果才为1，否则为0</p><h3 id="Deep部分"><a href="#Deep部分" class="headerlink" title="Deep部分"></a>Deep部分</h3><p>Deep模型是个前馈神经网络，对稀疏特征(如ID类特征)学习一个低维稠密向量，与原始特征拼接后作为MLP输入前向传播</p><script type="math/tex; mode=display">a^{(l+1)}=f\left(W^{(l)} a^{(l)}+b^{(l)}\right)</script><h3 id="Wide-amp-Deep"><a href="#Wide-amp-Deep" class="headerlink" title="Wide&amp;Deep"></a>Wide&amp;Deep</h3><p>Wide部分和Deep部分的输出进行加权求和作为最后的输出</p><script type="math/tex; mode=display">P(Y=1 \mid \mathbf{x})=\sigma\left(\mathbf{w}_{w i d e}^{T}[\mathbf{x}, \phi(\mathbf{x})]+\mathbf{w}_{d e e p}^{T} a^{\left(l_{f}\right)}+b\right)</script><p>其中文中提到Wide部分和Deep部分的优化器不相同，Wide部分采用基于L1正则的FTRL而Deep部分采用AdaGrad。<br>其中FTRL with L1非常注重模型的稀疏性，也就是说W&amp;D是想让Wide部分变得更加稀疏<br>更多相关可参考<a href="https://zhuanlan.zhihu.com/p/142958834" target="_blank" rel="noopener">见微知著，你真的搞懂Google的Wide&amp;Deep模型了吗？</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="TensorFlows调用"><a href="#TensorFlows调用" class="headerlink" title="TensorFlows调用"></a>TensorFlows调用</h3><p>Wide&amp;Deep模型可以直接通过Tensorflow进行调用</p><p><a href="https://www.tensorflow.org/api_docs/python/tf/keras/experimental/WideDeepModel?hl=en#args_1" target="_blank" rel="noopener">Tensorflow文档</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.experimental.WideDeepModel(</span><br><span class="line">    linear_model, dnn_model, activation=<span class="literal">None</span>, **kwargs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">linear_model = LinearModel()</span><br><span class="line">dnn_model = keras.Sequential([keras.layers.Dense(units=<span class="number">64</span>),</span><br><span class="line">                             keras.layers.Dense(units=<span class="number">1</span>)])</span><br><span class="line">combined_model = WideDeepModel(linear_model, dnn_model)</span><br><span class="line">combined_model.compile(optimizer=[<span class="string">'sgd'</span>, <span class="string">'adam'</span>], <span class="string">'mse'</span>, [<span class="string">'mse'</span>])</span><br><span class="line"><span class="comment"># define dnn_inputs and linear_inputs as separate numpy arrays or</span></span><br><span class="line"><span class="comment"># a single numpy array if dnn_inputs is same as linear_inputs.</span></span><br><span class="line">combined_model.fit([linear_inputs, dnn_inputs], y, epochs)</span><br><span class="line"><span class="comment"># or define a single `tf.data.Dataset` that contains a single tensor or</span></span><br><span class="line"><span class="comment"># separate tensors for dnn_inputs and linear_inputs.</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensors(([linear_inputs, dnn_inputs], y))</span><br><span class="line">combined_model.fit(dataset, epochs)</span><br></pre></td></tr></table></figure><h3 id="自己实践"><a href="#自己实践" class="headerlink" title="自己实践"></a>自己实践</h3><p><strong><a href="https://github.com/BENULL/RecModel/tree/master/wdl" target="_blank" rel="noopener">Github仓库地址</a></strong></p><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WideDeep</span><span class="params">(Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, linear_feature_columns, dnn_feature_columns, dnn_hidden_units=<span class="params">(<span class="number">256</span>, <span class="number">128</span>, <span class="number">64</span>)</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 l2_linear_reg=<span class="number">1e-6</span>, dnn_activation=<span class="string">'relu'</span>, dnn_dropout=<span class="number">0.</span>, )</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Wide&amp;Deep</span></span><br><span class="line"><span class="string">        :param linear_feature_columns: An iterable containing all the features used by linear part of the model.</span></span><br><span class="line"><span class="string">        :param dnn_feature_columns: An iterable containing all the features used by deep part of the model.</span></span><br><span class="line"><span class="string">        :param dnn_hidden_units: A list. Neural network hidden units.</span></span><br><span class="line"><span class="string">        :param dnn_activation: A string. Activation function of dnn.</span></span><br><span class="line"><span class="string">        :param dnn_dropout: A scalar. Dropout of dnn.</span></span><br><span class="line"><span class="string">        :param l2_linear_reg: A scalar. The regularizer of Linear.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(WideDeep, self).__init__()</span><br><span class="line">        self.linear_feature_columns = linear_feature_columns</span><br><span class="line">        self.dnn_feature_columns = dnn_feature_columns</span><br><span class="line">        self.wide_dense_feature = DenseFeatures(self.linear_feature_columns)</span><br><span class="line">        self.deep_dense_feature = DenseFeatures(self.dnn_feature_columns)</span><br><span class="line">        self.linear = Linear(use_bias=<span class="literal">True</span>, l2_linear_reg=l2_linear_reg)</span><br><span class="line">        self.dnn_network = DNN(dnn_hidden_units, dnn_activation, dnn_dropout)</span><br><span class="line">        self.output_layer = Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># Wide</span></span><br><span class="line">        wide_out = self.wide_dense_feature(inputs)</span><br><span class="line">        <span class="comment"># wide_out = self.linear(wide_inputs)</span></span><br><span class="line">        <span class="comment"># Deep</span></span><br><span class="line">        deep_inputs = self.deep_dense_feature(inputs)</span><br><span class="line">        deep_out = self.dnn_network(deep_inputs)</span><br><span class="line">        both = concatenate([deep_out, wide_out])</span><br><span class="line">        <span class="comment"># Out</span></span><br><span class="line">        outputs = self.output_layer(both)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span><span class="params">(Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, use_bias=False, l2_linear_reg=<span class="number">1e-6</span>)</span>:</span></span><br><span class="line">        super(Linear, self).__init__()</span><br><span class="line">        self.use_bias = use_bias</span><br><span class="line">        self.l2_reg_linear = l2_linear_reg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.use_bias:</span><br><span class="line">            self.bias = self.add_weight(name=<span class="string">'linear_bias'</span>,</span><br><span class="line">                                        shape=(<span class="number">1</span>,),</span><br><span class="line">                                        initializer=tf.keras.initializers.Zeros(),</span><br><span class="line">                                        trainable=<span class="literal">True</span>)</span><br><span class="line">        self.w = self.add_weight(name=<span class="string">"w"</span>,</span><br><span class="line">                                 shape=(int(input_shape[<span class="number">-1</span>]), <span class="number">1</span>),</span><br><span class="line">                                 regularizer=l2(self.l2_reg_linear),</span><br><span class="line">                                 trainable=<span class="literal">True</span>)</span><br><span class="line">        super(Linear, self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        linear_logit = tf.tensordot(inputs, self.w, axes=(<span class="number">-1</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> self.use_bias:</span><br><span class="line">            linear_logit += self.bias</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> linear_logit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNN</span><span class="params">(Layer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dnn_hidden_units, dnn_activation=<span class="string">'relu'</span>, dnn_dropout=<span class="number">0.</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Deep Neural Network</span></span><br><span class="line"><span class="string">        :param dnn_hidden_units: A list. Neural network hidden units.</span></span><br><span class="line"><span class="string">        :param dnn_activation: A string. Activation function of dnn.</span></span><br><span class="line"><span class="string">        :param dnn_dropout: A scalar. Dropout number.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(DNN, self).__init__()</span><br><span class="line">        self.dnn_network = [Dense(units=unit, activation=dnn_activation) <span class="keyword">for</span> unit <span class="keyword">in</span> dnn_hidden_units]</span><br><span class="line">        self.dropout = Dropout(dnn_dropout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, **kwargs)</span>:</span></span><br><span class="line">        x = inputs</span><br><span class="line">        <span class="keyword">for</span> dnn <span class="keyword">in</span> self.dnn_network:</span><br><span class="line">            x = dnn(x)</span><br><span class="line">        x = self.dropout(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>深度学习推荐系统-王喆</li><li><a href="https://mp.weixin.qq.com/s/LRghf8mj1hjUYri_m3AzBg" target="_blank" rel="noopener">Wide&amp;Deep模型的深入理解</a></li><li><a href="https://blog.csdn.net/qq_40778406/article/details/90740399" target="_blank" rel="noopener">推荐系统之wide&amp;deep</a></li><li><a href="https://zhuanlan.zhihu.com/p/142958834" target="_blank" rel="noopener">见微知著，你真的搞懂Google的Wide&amp;Deep模型了吗？</a></li><li><a href="https://github.com/ZiyaoGeng/Recommender-System-with-TF2.0/tree/master/WDL" target="_blank" rel="noopener">WDL 代码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;推荐系统模型之Wide-amp-Deep&quot;&gt;&lt;a href=&quot;#推荐系统模型之Wide-amp-Deep&quot; class=&quot;headerlink&quot; title=&quot;推荐系统模型之Wide&amp;amp;Deep&quot;&gt;&lt;/a&gt;推荐系统模型之Wide&amp;amp;Deep&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
      <category term="Paper" scheme="http://yoursite.com/tags/Paper/"/>
    
      <category term="Recommendation" scheme="http://yoursite.com/tags/Recommendation/"/>
    
  </entry>
  
  <entry>
    <title>10路监控视频行为识别——前端界面</title>
    <link href="http://yoursite.com/2021/09/02/10%E8%B7%AF%E7%9B%91%E6%8E%A7%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/"/>
    <id>http://yoursite.com/2021/09/02/10%E8%B7%AF%E7%9B%91%E6%8E%A7%E8%A7%86%E9%A2%91%E8%A1%8C%E4%B8%BA%E8%AF%86%E5%88%AB%E2%80%94%E2%80%94%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2/</id>
    <published>2021-09-02T06:36:12.000Z</published>
    <updated>2021-09-02T06:36:27.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MonitoringPanel"><a href="#MonitoringPanel" class="headerlink" title="MonitoringPanel"></a>MonitoringPanel</h1><p>使用opencv-python或ffmpeg方式实时读取10路网络摄像头rtsp视频流，请求后端行为识别模型，返回行为识别结果包括骨架、包围盒进行展示，该项目为前端展示部分</p><p><img src="https://img-blog.csdnimg.cn/947ee3bc2123432997be31df2aa73989.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQkVOVUxM,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyqt5</span><br><span class="line">opencv-python</span><br><span class="line">ffmpeg-python</span><br></pre></td></tr></table></figure><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── App.py        主入口</span><br><span class="line">├── Controller.py  后端交互文件</span><br><span class="line">├── UiWindow.py   界面文件</span><br><span class="line">├── Util.py        骨架绘制文件</span><br><span class="line">└── VideoCapture.py 视频获取文件</span><br></pre></td></tr></table></figure><h2 id="视频流获取"><a href="#视频流获取" class="headerlink" title="视频流获取"></a>视频流获取</h2><p>提供opencv-python和ffmpeg-python两种方式获取视频流，其中ffmpeg-python以tcp方式读取rtsp流更稳定</p><p>使用多进程，一个进程负责读取视频流放入队列，一个进程负责从队列取帧进行处理并请求后端服务<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procVideo</span><span class="params">(self, camera)</span>:</span></span><br><span class="line">    self.__cameras.append(camera)</span><br><span class="line">    videoCapture = VideoCapture(camera, self.__cameras.index(camera))</span><br><span class="line">    self.waitingQueueDict[camera] = Queue(maxsize=Controller.__WAITING_QUEUE_MAXSIZE)</span><br><span class="line">    p = multiprocessing.Process(target=videoCapture.captureFrameByFfmpeg, args=(self.waitingQueueDict[camera],))</span><br><span class="line">    self.__processes.append(p)</span><br><span class="line">    p.start()</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">procRecognizeQueue</span><span class="params">(self, waitingQueueDict, responseQueue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        imagesData, needRecognize = self.__gainFramePerVideo(waitingQueueDict)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> imagesData:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> needRecognize:</span><br><span class="line">            <span class="comment"># pass</span></span><br><span class="line">            responseQueue.put(self.__requestRecognizeAction(imagesData))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            responseQueue.put(list(map(self.__procResponseData, filter(<span class="literal">None</span>, imagesData))))</span><br></pre></td></tr></table></figure></p><h2 id="请求后端"><a href="#请求后端" class="headerlink" title="请求后端"></a>请求后端</h2><p>轮询向各路视频流队列取帧，对图像base64编码，组合成请求列表，使用grequest请求多服务器进行识别<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recognizeAction</span><span class="params">(self, params)</span>:</span></span><br><span class="line">    requestList = self.__buildRequestList(params)</span><br><span class="line">    responseList = grequests.map(requestList)</span><br><span class="line">    <span class="keyword">return</span> self.__processMultiResponse(requestList, responseList)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__buildRecognizeParam</span><span class="params">(self, images, pose: bool = False, box: bool = False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> images: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    images = list(map(</span><br><span class="line">        <span class="keyword">lambda</span> image: &#123;<span class="string">'camera'</span>: str(image[<span class="number">0</span>]), <span class="string">'image'</span>: base64.b64encode(cv2.imencode(<span class="string">'.jpg'</span>, image[<span class="number">2</span>])[<span class="number">1</span>]).decode()&#125;,</span><br><span class="line">        images))</span><br><span class="line">    option = dict(pose=pose, box=box)</span><br><span class="line">    <span class="keyword">return</span> dict(images=images, option=option)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__processMultiResponse</span><span class="params">(self, requestList, responseList)</span>:</span></span><br><span class="line">    mergedData = []</span><br><span class="line">    <span class="keyword">for</span> request, response <span class="keyword">in</span> zip(requestList, responseList):</span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            imagesNum = len(json.loads(request.kwargs[<span class="string">'data'</span>])[<span class="string">'images'</span>])</span><br><span class="line">            mergedData.extend([dict() <span class="keyword">for</span> _ <span class="keyword">in</span> range(imagesNum)])</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            res = response.json()</span><br><span class="line">            <span class="keyword">if</span> res.get(<span class="string">'status'</span>) == <span class="number">0</span> <span class="keyword">or</span> res.get(<span class="string">'status'</span>) == <span class="number">3</span>:</span><br><span class="line">                mergedData.extend(res.get(<span class="string">'data'</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">'Recognize Error: '</span> + res.get(<span class="string">'message'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> response.raise_for_status()</span><br><span class="line">    <span class="keyword">return</span> mergedData</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__buildRequestList</span><span class="params">(self, params)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [grequests.post(url, data=json.dumps(param), timeout=(<span class="number">1</span>, <span class="number">3</span>)) <span class="keyword">for</span> url, param <span class="keyword">in</span></span><br><span class="line">            zip(Controller.__RECOGNIZE_ACTION_URLS, params) <span class="keyword">if</span> param]</span><br></pre></td></tr></table></figure></p><h2 id="显示界面"><a href="#显示界面" class="headerlink" title="显示界面"></a>显示界面</h2><p>使用QGridLayout布局每个Grid放置QWidget，对每个QWidget中的QLabel通过设置一个定时器，定时刷新达到视频的效果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refresh</span><span class="params">(self, imageInfos)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> imageInfo <span class="keyword">in</span> imageInfos:</span><br><span class="line">        self.__refreshScreen(imageInfo)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__refreshScreen</span><span class="params">(self, info: dict)</span>:</span></span><br><span class="line">    screen = self.myWindow.screenByCamera[info[<span class="string">"camera"</span>]]</span><br><span class="line">    screen.setActionLabel(info.get(<span class="string">'label'</span>))</span><br><span class="line">    screen.setImage(info[<span class="string">'image'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__startRefresh</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.refreshTimer = QTimer()</span><br><span class="line">    self.refreshTimer.timeout.connect(self.process)</span><br><span class="line">    self.refreshTimer.start(App.__REFRESH_INTERVAL)</span><br></pre></td></tr></table></figure></p><h2 id="骨架和包围盒绘制"><a href="#骨架和包围盒绘制" class="headerlink" title="骨架和包围盒绘制"></a>骨架和包围盒绘制</h2><p>骨架采用OpenPose 18个关节点进行绘制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">renderPose</span><span class="params">(image, poses, inplace: bool = True, inverseNormalization=<span class="string">'auto'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""绘制骨架</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数</span></span><br><span class="line"><span class="string">        image: 原图</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        poses: 一组或多组关节点坐标</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        config: 配置项</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        inplace: 是否绘制在原图上</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        inverseNormalization` 是否[True|False]进行逆归一化, 当值为auto时将根据坐标值自动确定</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回</span></span><br><span class="line"><span class="string">        输出图像, inplace为True时返回image, 为False时返回新的图像</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    poses = np.array(poses)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inplace:</span><br><span class="line">        image = image.copy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(poses.shape) == <span class="number">2</span>:</span><br><span class="line">        poses = poses[<span class="literal">None</span>, :, :<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inverseNormalization <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'auto'</span>, <span class="literal">True</span>, <span class="literal">False</span>]:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f'Unknown "inverseNormalization" value <span class="subst">&#123;inverseNormalization&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    _isPointValid = <span class="keyword">lambda</span> point: point[<span class="number">0</span>] != <span class="number">0</span> <span class="keyword">and</span> point[<span class="number">1</span>] != <span class="number">0</span></span><br><span class="line">    _FILL_CIRCLE = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> pose <span class="keyword">in</span> poses:</span><br><span class="line">        pose = preparePoint(pose, (image.shape[<span class="number">1</span>], image.shape[<span class="number">0</span>]), inverseNormalization)</span><br><span class="line">        validPointIndices = set(filter(<span class="keyword">lambda</span> i: _isPointValid(pose[i]), range(pose.shape[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">for</span> i, (start, end) <span class="keyword">in</span> enumerate(RENDER_CONFIG_OPENPOSE[<span class="string">'edges'</span>]):</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">in</span> validPointIndices <span class="keyword">and</span> end <span class="keyword">in</span> validPointIndices:</span><br><span class="line">                cv2.line(image, tuple(pose[start]), tuple(pose[end]), RENDER_CONFIG_OPENPOSE[<span class="string">'edgeColors'</span>][i],</span><br><span class="line">                         RENDER_CONFIG_OPENPOSE[<span class="string">'edgeWidth'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> validPointIndices:</span><br><span class="line">            cv2.circle(image, tuple(pose[i]), RENDER_CONFIG_OPENPOSE[<span class="string">'pointRadius'</span>],</span><br><span class="line">                       tuple(RENDER_CONFIG_OPENPOSE[<span class="string">'pointColors'</span>][i]), _FILL_CIRCLE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">renderBbox</span><span class="params">(image, box, inplace: bool = True, inverseNormalization=<span class="string">'auto'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inplace:</span><br><span class="line">        image = image.copy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inverseNormalization <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'auto'</span>, <span class="literal">True</span>, <span class="literal">False</span>]:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f'Unknown "inverseNormalization" value <span class="subst">&#123;inverseNormalization&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(box) == <span class="number">4</span>:</span><br><span class="line">        box = np.array(box).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        box = preparePoint(box, (image.shape[<span class="number">1</span>], image.shape[<span class="number">0</span>]), inverseNormalization)</span><br><span class="line">        cv2.rectangle(image, tuple(box[<span class="number">0</span>]), tuple(box[<span class="number">0</span>]+box[<span class="number">1</span>]), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/BENULL/monitoring-panel" target="_blank" rel="noopener">Github仓库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MonitoringPanel&quot;&gt;&lt;a href=&quot;#MonitoringPanel&quot; class=&quot;headerlink&quot; title=&quot;MonitoringPanel&quot;&gt;&lt;/a&gt;MonitoringPanel&lt;/h1&gt;&lt;p&gt;使用opencv-python或ff
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记——舞！舞！舞！</title>
    <link href="http://yoursite.com/2021/08/31/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%88%9E%EF%BC%81%E8%88%9E%EF%BC%81%E8%88%9E%EF%BC%81/"/>
    <id>http://yoursite.com/2021/08/31/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%88%9E%EF%BC%81%E8%88%9E%EF%BC%81%E8%88%9E%EF%BC%81/</id>
    <published>2021-08-31T09:44:41.000Z</published>
    <updated>2021-11-27T04:44:28.637Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-na.ssl-images-amazon.com/images/I/41uxb-zEJJL._SX367_BO1,204,203,200_.jpg" align="center"></p><blockquote><p>作者: <a href="https://book.douban.com/author/4502361/" target="_blank" rel="noopener">[日] 村上春树</a><br>出版社: 上海译文出版社<br>原作名: ダンス・ダンス・ダンス<br>译者: <a href="https://book.douban.com/author/4502363/" target="_blank" rel="noopener">林少华</a><br>出版年: 2007-7<br>ISBN: 9787532742950</p></blockquote><div class="note info"><p>210712</p></div><p><strong>⭕️ “孤独而又不失真诚和温情，无奈而又不失豁达与幽默，厌倦而又从不自怨自艾自暴自弃，身处社会边缘而又拥有自成一统的价值观和付诸行动的良知和勇气。”</strong></p><div class="note info"><p>210720</p></div><p><strong>⭕️ “我对我本身到底知道什么呢？我通过自己的意识所把握的我，难道是真实的我吗？正如灌进录音带的声音听起来不像是自己发出来的一样，我所把握的自身形象恐怕也是自己随心所欲捏造出来的扭曲物……”</strong></p><p><strong>⭕️ “我最喜欢的么，怎么说好呢，”她看着我的眼睛，“就是，冬天寒冷的早晨实在懒得起床的时候，飘来咖啡味儿，阵阵扑鼻的火腿煎蛋味儿，传来切面包的嚓嚓声，闻着听着就忍不住了，霍的一声爬下床来——就是这个。”</strong></p><p><strong>⭕️ “我在他们看来，现实中或许愚蠢迟钝，或许精明狡黠，怎么都不碍事，不必大惊小怪。世上不存在误解，无非看法相左。这是我的观点。”</strong></p><div class="note info"><p>210723</p></div><p><strong>⭕️ “无所事事。既无应干的事，又无想干的事。”</strong></p><p><strong>⭕️ “在所有的意义上，他这个人还是独立合适，我想。”</strong></p><div class="note info"><p>210724</p></div><p><strong>⭕️ “怎么说呢，你看上去好像我行我素，至于别人怎么看怎么想，你好像不大放在心上，只是做自己想做的事情，并设法做得容易些。就是说，你确保了完整而独立的自己。”</strong></p><div class="note info"><p>210725</p></div><p><strong>⭕️ “顶峰——这东西于我根本不曾有过。回首望去，甚至觉得人生都无从提起。起伏自是有一点，匆匆爬上，草草跑下。如此而已，一无所成，一无所获，一无所有，既未爱过别人，又未被人爱过。道路平坦之至，场景单调之极。仿佛在电子游戏机荧屏上往来彷徨，犹如大力士那样不断张大嘴巴吃掉迷途中的虚线。途中漫无目的，惟死确凿无疑，迟早罢了。”</strong></p><div class="note info"><p>210726</p></div><p><strong>⭕️ “说来荒唐，经费可以大肆挥霍，而借款却偿还不上。这世道一天比一天变得不可捉摸，连自己是穷鬼还是富翁都搞不清。”</strong></p><div class="note info"><p>210727</p></div><p><strong>⭕️ “地道正经同时也是放纵不羁”</strong></p><p><strong>⭕️ “只身一人很觉快意。当然我并不讨厌同雪在一起，这是两回事。一个人的确也不坏。干什么都不必事先同人商量，失败也无须对谁解释。遇到好笑之事，尽管自开玩笑“嗤嗤”独自笑上一气，不会有人说什么玩笑开得庸俗。无聊之时，盯视一番烟灰缸即可打发过去，更不会有人问我干嘛盯视烟灰缸。好也罢坏也罢，我已经彻底习惯单身生活了。”</strong></p><p><strong>⭕️ “总而言之，我要说的是必要性这玩意儿不是自然而然产生的，而是如此人为地制造出来的，捏造出来的。”</strong></p><p><strong>⭕️ “有一种人以为只要把这些东西搞到手就高人一等，就与众不同，却意识不到惟其如此才到头来落得个与众相同”</strong></p><p><strong>⭕️ “人这东西说不定什么时候死去，人的生命要比你想的远为脆弱。所以人与人接触的时候，应该不给日后留下懊悔，应该做到公平，可能的话，还应该真诚。不付出这种努力而只会在人死后简单哭泣后悔的人——这样的人我不欣赏，从个人角度而言。”</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://images-na.ssl-images-amazon.com/images/I/41uxb-zEJJL._SX367_BO1,204,203,200_.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg-python读取rtsp(tcp方式)</title>
    <link href="http://yoursite.com/2021/08/27/ffmpeg-python%E8%AF%BB%E5%8F%96rtsp(tcp%E6%96%B9%E5%BC%8F)/"/>
    <id>http://yoursite.com/2021/08/27/ffmpeg-python%E8%AF%BB%E5%8F%96rtsp(tcp%E6%96%B9%E5%BC%8F)/</id>
    <published>2021-08-27T11:32:25.000Z</published>
    <updated>2021-09-02T06:36:28.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-ffmpeg-python读取rtsp-tcp方式"><a href="#python-ffmpeg-python读取rtsp-tcp方式" class="headerlink" title="[python] ffmpeg-python读取rtsp(tcp方式)"></a>[python] ffmpeg-python读取rtsp(tcp方式)</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在多路无线摄像头同时接入时，网络不稳定，经常出现雪花屏的问题。参考网上资料，怀疑是网络摄像头默认使用RTSP协议，RTSP下层默认使用UDP传输，而UDP传输是不可靠的，会丢包，所以导致雪花屏。</p><p>RTSP使用TCP或者UDP传输，使用TCP还是UDP取决于客户端的SETUP请求。所以尝试将由UDP改为TCP取流。</p><p>opencv-python的videocapture获取rtsp只支持UDP方式，改为用FFmpeg-python以tcp方式获取流</p><p>两种库和方式取流的速度、延迟和稳定性还待测试</p><h2 id="FFmpeg-python"><a href="#FFmpeg-python" class="headerlink" title="FFmpeg-python"></a>FFmpeg-python</h2><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ffmpeg-python</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://github.com/kkroening/ffmpeg-python" target="_blank" rel="noopener">Github仓库地址</a></p></li><li><p><a href="https://kkroening.github.io/ffmpeg-python/" target="_blank" rel="noopener">API 文档</a></p></li><li><p><a href="https://github.com/kkroening/ffmpeg-python/tree/master/examples" target="_blank" rel="noopener">使用样例</a></p></li></ul><p><strong>ffmpeg学习资源</strong></p><ul><li><a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg Homepage</a></li><li><a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="noopener">FFmpeg Documentation</a></li><li><a href="https://ffmpeg.org/ffmpeg-filters.html" target="_blank" rel="noopener">FFmpeg Filters Documentation</a></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ffmpeg</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">camera = <span class="string">'rtsp://admin:1234abcd@192.168.1.64/h264/ch1/main/av_stream'</span></span><br><span class="line"></span><br><span class="line">probe = ffmpeg.probe(camera)</span><br><span class="line">video_stream = next((stream <span class="keyword">for</span> stream <span class="keyword">in</span> probe[<span class="string">'streams'</span>] <span class="keyword">if</span> stream[<span class="string">'codec_type'</span>] == <span class="string">'video'</span>), <span class="literal">None</span>)</span><br><span class="line">width = int(video_stream[<span class="string">'width'</span>])</span><br><span class="line">height = int(video_stream[<span class="string">'height'</span>])</span><br><span class="line"></span><br><span class="line">out = (</span><br><span class="line">    ffmpeg</span><br><span class="line">        .input(camera, rtsp_transport=<span class="string">'tcp'</span>)</span><br><span class="line">        .output(<span class="string">'pipe:'</span>, format=<span class="string">'rawvideo'</span>, pix_fmt=<span class="string">'bgr24'</span>, loglevel=<span class="string">"quiet"</span>, r=<span class="number">25</span>)</span><br><span class="line">        .run_async(pipe_stdout=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line">cnt_empty = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    in_bytes = out.stdout.read(height * width * <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> in_bytes:</span><br><span class="line">        cnt_empty += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt_empty &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cnt_empty = <span class="number">0</span></span><br><span class="line">    frame = np.frombuffer(in_bytes, dtype=np.uint8).reshape(height, width, <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># to process frame</span></span><br><span class="line">    cv2.imshow(<span class="string">'test'</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_39970103/article/details/102484708" target="_blank" rel="noopener">解决摄像头花屏问题</a>,/</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-ffmpeg-python读取rtsp-tcp方式&quot;&gt;&lt;a href=&quot;#python-ffmpeg-python读取rtsp-tcp方式&quot; class=&quot;headerlink&quot; title=&quot;[python] ffmpeg-python读取rtsp
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记——悉达多</title>
    <link href="http://yoursite.com/2021/08/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%82%89%E8%BE%BE%E5%A4%9A/"/>
    <id>http://yoursite.com/2021/08/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%82%89%E8%BE%BE%E5%A4%9A/</id>
    <published>2021-08-15T04:34:46.000Z</published>
    <updated>2021-08-22T02:14:43.914Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-cn.ssl-images-amazon.cn/images/I/41bpeNU3GJL.jpg" align="center"></p><blockquote><p>作者: <a href="https://book.douban.com/search/赫尔曼·黑塞" target="_blank" rel="noopener">[德] 赫尔曼·黑塞</a><br>出版社: 上海人民出版社<br>出品方: <a href="https://book.douban.com/series/39071?brand=1" target="_blank" rel="noopener">世纪文景</a><br>原作名: Siddhartha<br>译者: <a href="https://book.douban.com/search/杨玉功" target="_blank" rel="noopener">杨玉功</a><br>出版年: 2012-10<br>ISBN: 9787208106086</p></blockquote><div class="note info"><p>210731</p></div><p><strong>⭕️“什么是冥想?什么是对肉体的弃绝?什么是斋戒和调息?那只不过是在逃离自我，只不过是对自我所受苦难的一种短暂的逃避，只不过是针对生命荒谬与痛苦的一副暂时的麻醉剂。”</strong></p><div class="note info"><p>210801</p></div> <p><strong>⭕️“因为在他看来，认识到事物的因缘就意味着思想，而只有通过思想，感觉才成为知识并且不会失去，而是变得真实，其内在熠熠生辉。”</strong></p><div class="note info"><p>210803</p></div> <p><strong>⭕️“尘世攫住了他，享乐、贪婪、无所事事，最终是他曾一直鄙弃并讥讽为最愚蠢的人性之恶——占有欲。金钱、地产和财富已使他堕入陷阱。它们不再是游戏和玩物，它们已经变成锁链和重负。”</strong></p><div class="note info"><p>210804</p></div><p><strong>⭕️“他爱世上的一切，他对他目光所触及的一切都充满着愉悦的爱。此时他觉得，以前他之所以如此病态，正是因为他不能够爱任何人和任何事物。”</strong></p><div class="note info"><p>210805</p></div><p><strong>⭕️“他尤其学会了倾听的艺术，学会了以一颗宁静的心灵、一种期盼而又宽容的心境去倾听，抛弃一切欲望和激情，抛弃一切评判与见解。”</strong></p><div class="note info"><p>210806</p></div><p><strong>⭕️“他并不能帮助自己的儿子，他不应把自我强加于他。”</strong></p><p><strong>⭕️“他从河水学会了等待、耐心与倾听的艺术。”</strong></p><div class="note info"><p>210807</p></div><p><strong>⭕️“他记得自己曾向伽摩拉夸耀三件事，三种崇高而不可战胜的技艺——斋戒、等待与思考；这些曾经是他的财富、他的才能、他的实力以及他坚实的支柱。”</strong></p><p><strong>⭕️“他们的虚荣、欲望以及平凡琐事在他眼中不再显得荒谬，而是变得可以理解，可以热爱，甚至值得他尊敬。诸如母亲对自己的孩子那种盲目的爱；溺爱的父亲因为自己的独生子而表现出的那种盲目而愚蠢的骄傲；年轻浅薄的女人对于饰物以及男人的赞美那种盲目而急切的追求，所有这些简单、渺小、愚蠢却又如此强烈、如此激情勃发、充满生命力的冲动和欲望，对于悉达多不再显得微不足道。”</strong></p><p><strong>⭕️“知识可以传授，但智慧不能。人们可以寻见智慧，在生命中体现出智慧，以智慧自强，以智慧来创造奇迹，但人们不可能去传授智慧。”</strong></p><p><strong>⭕️“学会热爱这个世界，不再以某种欲愿与臆想出来的世界、某种虚构的完善的幻象来与之比拟；学会接受这个世界的本来面目，热爱它，以归属于它而心存欣喜。”</strong></p><p><strong>⭕️“我感觉爱是世上最重要的。研究这个世界，解释它或是鄙弃它，对于大思想家或许很重要；但我以为惟一重要的就是去爱这个世界，而不是去鄙弃它。我们不应彼此仇视，而应以爱、赞美与尊重来善待世界，善待我们自身以及一切生命”</strong></p><p><strong>⭕️“这是一个“现象界”惊人扩张的时代，一个缺乏信仰的时代，一个令人无所适从的时代，一个需要更宽广精神框架的时代。因而，这也必将是一个需要“圆融统一”的时代，一个需要“禅”的时代。”</strong><br><strong>⭐️译者序</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://images-cn.ssl-images-amazon.cn/images/I/41bpeNU3GJL.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者: &lt;a href=&quot;https://book.
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>MQTT介绍与使用</title>
    <link href="http://yoursite.com/2021/08/02/MQTT%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/08/02/MQTT%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2021-08-02T05:22:25.000Z</published>
    <updated>2021-08-21T05:40:08.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-MQTT介绍与使用"><a href="#Python-MQTT介绍与使用" class="headerlink" title="[Python] MQTT介绍与使用"></a>[Python] MQTT介绍与使用</h1><h2 id="MQTT协议"><a href="#MQTT协议" class="headerlink" title="MQTT协议"></a>MQTT协议</h2><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>开放消息协议，简单易实现</li><li>发布订阅模式，一对多消息发布</li><li>基于TCP/IP网络连接,提供有序，无损，双向连接。</li><li>1字节固定报头，2字节心跳报文，最小化传输开销和协议交换，有效减少网络流量。</li><li>消息QoS支持，可靠传输保证</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p><p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p><ul><li><p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）</p></li><li><p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/49209688987244b0a8883dfbb5c171d7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="MQTT代理"><a href="#MQTT代理" class="headerlink" title="MQTT代理"></a>MQTT代理</h2><p><a href="https://mosquitto.org/download/" target="_blank" rel="noopener">mosquitto</a>是一款开源的MQTT消息代理（服务器）软件，提供轻量级的，支持可发布/可订阅的的消息推送模式，使设备对设备之间的短消息通信变得简单，比如现在应用广泛的低功耗传感器，手机、嵌入式计算机、微型控制器等移动设备。</p><ul><li>安装mosquitto</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mosquitto -y</span><br></pre></td></tr></table></figure><ul><li>安装mosquitto命令行客户端</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mosquitto-clients -y</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>发布使用mosquitto_pub命令,订阅使用mosquitto_sub命令,常用参数如下</p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">-h</td><td style="text-align:center">服务器主机，默认localhost</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:center">指定主题</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">用户名</td></tr><tr><td style="text-align:center">-P</td><td style="text-align:center">密码</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:center">客户端id，唯一</td></tr><tr><td style="text-align:center">-m</td><td style="text-align:center">发布的消息内容</td></tr></tbody></table></div><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_sub -h localhost -t "test/#" -u user2 -P 123456 -i "client1"</span><br></pre></td></tr></table></figure><h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_pub -h localhost -t "test/abc" -u user1 -P 123456 -i "client3" -m "How are you?"</span><br></pre></td></tr></table></figure><h2 id="MQTT使用"><a href="#MQTT使用" class="headerlink" title="MQTT使用"></a>MQTT使用</h2><h3 id="MQTT-客户端工具"><a href="#MQTT-客户端工具" class="headerlink" title="MQTT 客户端工具"></a>MQTT 客户端工具</h3><p>MQTT 客户端工具常用于建立与 MQTT 服务器 的连接，进行主题订阅、消息收发等操作</p><ul><li><p><a href="https://mqttx.app/zh" target="_blank" rel="noopener">MQTT X</a> 是由 <a href="https://www.emqx.com/zh" target="_blank" rel="noopener">EMQ</a> 开源的一款跨平台 <a href="https://www.emqx.com/zh/mqtt/mqtt5" target="_blank" rel="noopener">MQTT 5.0</a> 桌面测试客户端，支持 macOS，Linux，Windows</p><p><img src="https://static.emqx.net/images/mdt40vcf7ebdrxohghlzwpdyr4u9494l.png" alt="MQTTX" style="zoom: 25%;"></p><p><strong>项目地址：</strong> <a href="https://mqttx.app/zh" target="_blank" rel="noopener">MQTT X 官网</a></p><p><strong>下载地址：</strong> <a href="https://github.com/emqx/MQTTX/releases" target="_blank" rel="noopener">MQTT X GitHub</a></p></li></ul><ul><li><p>mqtt-spy是 Eclipse Paho 和 Eclipse IoT 的一部分，它通过直接启动 JAR 文件在 Java 8 和 JavaFX 之上运行，mqtt-spy 有一种很好的交互方式来展现基本的 MQTT发布/订阅机制。</p><p><strong>项目地址：</strong> <a href="https://github.com/eclipse/paho.mqtt-spy" target="_blank" rel="noopener">GitHub mqtt-spy</a></p><p><strong>下载地址：</strong> <a href="https://github.com/eclipse/paho.mqtt-spy/releases" target="_blank" rel="noopener">https://github.com/eclipse/paho.mqtt-spy/releases</a></p></li></ul><ul><li><p>MQTT Explorer 是一个全面且易于使用的 MQTT 客户端，是目前比较流行的 MQTT 桌面测试客户端之一，基于它提供有关 MQTT Topics 的结构化预览展示，并使其在对 MQTT Broker 上的设备/服务的使用变得非常简单。目前基于 CC BY-NC-ND 4.0 协议开源，用户可随意查看源码和使用。</p><p><img src="https://static.emqx.net/images/7be0606fdbb16f93359429dba0cc3e6e.png" alt="explorer" style="zoom:25%;"></p><p><strong>项目地址：</strong> <a href="https://github.com/thomasnordquist/MQTT-Explorer" target="_blank" rel="noopener">Github MQTT-Explorer</a></p><p><strong>下载地址：</strong> <a href="https://mqtt-explorer.com/" target="_blank" rel="noopener">https://mqtt-explorer.com/</a></p></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>使用 <strong>paho-mqtt</strong> 库 ，实现客户端与 MQTT 服务器的连接、订阅、取消订阅、收发消息等功能</p><ul><li>使用connect()/connect_async() 连接MQTT代理</li><li>频繁的调用loop()来维持与MQTT代理之间的流量或者使用loop_start()来设置一个线程为你调用loop()或者在一个阻塞的函数中调用loop_forever()来为你调用loop()</li><li>使用subscribe()订阅一个主题（topic）并接受消息（messages）</li><li>使用publish()来发送消息</li><li>使用disconnect()来断开与MQTT代理的连接</li></ul><p><strong>详细见<a href="https://pypi.python.org/pypi/paho-mqtt" target="_blank" rel="noopener">paho-mqtt项目描述</a></strong></p><h4 id="回调-Callbacks"><a href="#回调-Callbacks" class="headerlink" title="回调 Callbacks"></a>回调 Callbacks</h4><ul><li>on_connect 当代理响应连接请求时调用</li><li>on_disconnect   当与代理断开连接时调用</li><li>on_message 当收到关于客户订阅的主题的消息时调用。</li><li>on_publish 当使用publish()发送的消息已经传输到代理时被调用</li><li>on_subscribe 当代理响应订阅请求时被调用。</li><li>on_unsubscribe 当代理响应取消订阅请求时调用</li><li>on_log 当客户端有日志信息时调用</li></ul><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><ul><li>构造函数<br><code>Client(client_id=&quot;&quot;, clean_session=True, userdata=None, protocol=MQTTv311, transport=&quot;tcp&quot;)</code></li></ul><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>client_id</td><td>连接到代理时使用的唯一客户端ID字符串。 如果client_id长度为零或无，则会随机生成一个。 在这种情况下，clean_session参数必须为True。</td></tr><tr><td>clean_session</td><td>一个决定客户端类型的布尔值。 如果为True，那么代理将在其断开连接时删除有关此客户端的所有信息。 如果为False，则客户端是持久客户端，当客户端断开连接时，订阅信息和排队消息将被保留。</td></tr><tr><td>userdata</td><td>用户定义的任何类型的数据作为userdata参数传递给回调函数。 它可能会在稍后使用user_data_set（）函数进行更新。</td></tr><tr><td>protocol</td><td>用于此客户端的MQTT协议的版本。 可以是MQTTv31或MQTTv311或MQTT v5.0。</td></tr><tr><td>transport</td><td>设置为“websockets”通过WebSockets发送MQTT。 保留默认的“tcp”使用原始TCP。</td></tr></tbody></table></div><ul><li><p>reinitialise</p><p><code>reinitialise(client_id=&quot;&quot;, clean_session=True, userdata=None)</code></p><p>reinitialise（）函数将客户端重置为其开始状态，就像它刚刚创建一样。 它采用与Client（）构造函数相同的参数。</p></li><li><p>connect<br>将客户端连接到代理。 这是一个阻塞函数。</p><p><code>connect(host, port=1883, keepalive=60, bind_address=&quot;&quot;)</code></p></li></ul><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>host</td><td>远程代理的主机名或IP地址</td></tr><tr><td>port</td><td>要连接的服务器主机的网络端口。 默认为1883</td></tr><tr><td>keepalive</td><td>与代理通信之间允许的最长时间段,如果没有其他消息正在交换，则它将控制客户端向代理发送ping消息的速率</td></tr><tr><td>bind_address</td><td>假设存在多个接口，将绑定此客户端的本地网络接口的IP地址</td></tr></tbody></table></div><h4 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h4><p>从客户端发送消息给代理<br><code>publish(topic, payload=None, qos=0, retain=False)</code></p><p>消息将会发送给代理，并随后从代理发送到订阅匹配主题的任何客户端</p><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>topic</td><td>该消息发布的主题</td></tr><tr><td>payload</td><td>要发送的实际消息。如果没有给出，或设置为无，则将使用零长度消息。 传递int或float将导致有效负载转换为表示该数字的字符串。 如果你想发送一个真正的int / float，使用struct.pack（）来创建你需要的负载</td></tr><tr><td>qos</td><td>服务的质量级别</td></tr><tr><td>retain</td><td>如果设置为True，则该消息将被设置为该主题的“最后已知良好”/保留的消息</td></tr></tbody></table></div><p>返回以下属性和方法的MQTTMessageInfo<br><strong>rc</strong>:发布的结果</p><div class="table-container"><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>MQTT_ERR_SUCCESS</td><td>成功</td></tr><tr><td>MQTT_ERR_NO_CONN</td><td>客户端当前未连接</td></tr><tr><td>MQTT_ERR_QUEUE_SIZE</td><td>当使用max_queued_messages_set来指示消息既不排队也不发送。</td></tr></tbody></table></div><p><strong>mid</strong>:发布请求的消息ID。<br>如果mid已定义，则可以通过检查on_publish（）回调中的mid来跟踪发布请求。<br><strong>wait_for_publish()</strong>:函数将阻塞，直到消息发布。 如果消息未排队（rc == MQTT_ERR_QUEUE_SIZE），它将引发ValueError。<br><strong>is_published</strong>:如果消息已发布，is_published返回True。 如果消息未排队（rc == MQTT_ERR_QUEUE_SIZE），它将引发ValueError。</p><blockquote><p>如果主题为无，长度为零或无效（包含通配符），qos不是0,1或2之一，或者有效负载长度大于268435455字节，则会引发ValueError。</p></blockquote><h4 id="Subscribe"><a href="#Subscribe" class="headerlink" title="Subscribe"></a>Subscribe</h4><p><strong>订阅一个或多个主题</strong></p><p><code>subscribe(topic, qos=0</code></p><div class="table-container"><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>topic</td><td>一个字符串，指定要订阅的订阅主题</td></tr><tr><td>qos</td><td>期望的服务质量等级。 默认为0。</td></tr></tbody></table></div><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paho.mqtt.client <span class="keyword">as</span> mqtt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">CONN_CONFIG = &#123;</span><br><span class="line">    <span class="string">'product'</span>: &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'mqtt.broker.com'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">1883</span>,</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">'username'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'dev'</span>: &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'port'</span>: <span class="number">1883</span>,</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">'username'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MQTTClient</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, client_id, profile=<span class="string">'dev'</span>, )</span>:</span></span><br><span class="line">        self.config = CONN_CONFIG[profile]</span><br><span class="line">        self.client_id = client_id</span><br><span class="line">        self.connect_flag = <span class="literal">False</span></span><br><span class="line">        self.client = self.__create_client(client_id)</span><br><span class="line">        self.__connect()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__create_client</span><span class="params">(self, client_id)</span>:</span></span><br><span class="line">        client = mqtt.Client(client_id=client_id)</span><br><span class="line">        client.username_pw_set(self.config[<span class="string">'username'</span>], self.config[<span class="string">'password'</span>])</span><br><span class="line">        client.on_connect = self.__on_connect</span><br><span class="line">        client.on_message = self.__on_message</span><br><span class="line">        client.on_publish = self.__on_publish</span><br><span class="line">        client.on_disconnect = self.__on_disconnect</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client.connect(self.config[<span class="string">'host'</span>], self.config[<span class="string">'port'</span>], <span class="number">60</span>)</span><br><span class="line">        self.client.loop_start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publish</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.connect_flag:</span><br><span class="line">            self.__connect()</span><br><span class="line">        payload = dict(data=msg)</span><br><span class="line">        self.client.publish(<span class="string">f'topic'</span>, payload=json.dumps(payload), qos=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__on_connect</span><span class="params">(self, client, userdata, flags, rc)</span>:</span></span><br><span class="line">        self.connect_flag = <span class="literal">True</span></span><br><span class="line">        print(<span class="string">"connected with result code: "</span> + str(rc))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__on_message</span><span class="params">(self, client, userdata, msg)</span>:</span></span><br><span class="line">        print(msg.topic + <span class="string">" "</span> + str(msg.payload))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__on_subscribe</span><span class="params">(self, client, userdata, mid, granted_qos)</span>:</span></span><br><span class="line">        print(<span class="string">'on subscribe: mid='</span> + str(mid))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__on_publish</span><span class="params">(self, client, userdata, mid)</span>:</span></span><br><span class="line">        print(<span class="string">"on publish: mid="</span> + str(mid))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__on_disconnect</span><span class="params">(self, client, userdata, rc)</span>:</span></span><br><span class="line">        self.connect_flag = <span class="literal">False</span></span><br><span class="line">        print(<span class="string">'disconnecting reason '</span> + str(rc))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client.disconnect()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/w3cnote/mqtt-intro.html" target="_blank" rel="noopener">MQTT 入门介绍</a><br><a href="http://mqtt.p2hp.com/" target="_blank" rel="noopener">MQTT中文网</a><br><a href="https://www.cnblogs.com/guyk/p/12405938.html" target="_blank" rel="noopener">ubuntu下Mosquitto安装及配置</a><br><a href="https://www.emqx.com/zh/blog/mqtt-client-tools" target="_blank" rel="noopener">常见MQTT 客户端工具比较</a><br><a href="https://blog.csdn.net/weixin_41656968/article/details/80848542#3onmessage" target="_blank" rel="noopener">Python paho-mqtt 模块使用和API分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-MQTT介绍与使用&quot;&gt;&lt;a href=&quot;#Python-MQTT介绍与使用&quot; class=&quot;headerlink&quot; title=&quot;[Python] MQTT介绍与使用&quot;&gt;&lt;/a&gt;[Python] MQTT介绍与使用&lt;/h1&gt;&lt;h2 id=&quot;MQTT协
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记——消失的13级台阶</title>
    <link href="http://yoursite.com/2021/07/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%B6%88%E5%A4%B1%E7%9A%8413%E7%BA%A7%E5%8F%B0%E9%98%B6/"/>
    <id>http://yoursite.com/2021/07/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%B6%88%E5%A4%B1%E7%9A%8413%E7%BA%A7%E5%8F%B0%E9%98%B6/</id>
    <published>2021-07-25T14:58:22.000Z</published>
    <updated>2021-08-02T14:58:58.613Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://m.media-amazon.com/images/I/51ckcjFtx4S.jpg" align="center"></p><blockquote><p>作者: [日] 高野和明<br>出版社: 上海文艺出版社<br>出品方: 读客文化<br>副标题: 读客外国小说文库<br>原作名: 13階段<br>译者: 赵建勋<br>ISBN: 9787532175512</p></blockquote><div class="note info"><p>210725</p></div><blockquote class="blockquote-center"><p>刑法史上有两种理论：一种是报应刑论，主张刑罚是对犯罪者的报复；另一种是目的刑论，以教育改造犯罪者、消除社会威胁为主。</p></blockquote><blockquote class="blockquote-center"><p>为什么是三个按钮呢？这是为了让三个死刑执行官分不清楚到底是谁把死刑犯送上西天的。</p></blockquote><blockquote class="blockquote-center"><p>如果这个社会认可私刑，社会就会陷于无秩序状态。因此，必须由第三者，也就是国家机器行使刑罚权，来代替被害人亲属做他们想做的事。</p></blockquote><blockquote class="blockquote-center"><p>以报应刑论为基础的死刑判决制度，引出了悔过之心这个教育刑论希望达到的目标，这种现象难道不是一种绝妙的讽刺吗？</p></blockquote><blockquote class="blockquote-center"><p>维持死刑制度的既不是国民也不是国家，而是杀人犯自己!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://m.media-amazon.com/images/I/51ckcjFtx4S.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者: [日] 高野和明&lt;br&gt;出版社: 上海文艺出版社&lt;br&gt;出品方: 读
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>记一次大数据挑战赛</title>
    <link href="http://yoursite.com/2021/06/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <id>http://yoursite.com/2021/06/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8C%91%E6%88%98%E8%B5%9B/</id>
    <published>2021-06-30T13:38:29.000Z</published>
    <updated>2021-06-30T13:38:01.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次大数据挑战赛"><a href="#记一次大数据挑战赛" class="headerlink" title="记一次大数据挑战赛"></a>记一次大数据挑战赛</h1><blockquote><p>对于给定的一定数量到访过微信视频号“热门推荐”的用户， 根据这些用户在视频号内的历史n天的行为数据，通过算法在测试集上预测出这些用户对于不同视频内容的互动行为（包括点赞、点击头像、收藏、转发等）的发生概率。 本次比赛以多个行为预测结果的加权uAUC值进行评分</p></blockquote><p><a href="https://algo.weixin.qq.com/" target="_blank" rel="noopener">2021微信大数据挑战赛</a></p><p>第一次接触这类比赛，成绩不大行，记录一下自己实验到的东西，并不一定对</p><p>因为第一次，对于什么特征在这类任务中比较重要也不清楚，造的特征主要参考了大佬的分享<a href="https://mp.weixin.qq.com/s/yE5yThqZ8R9v4EIxlr3bsA" target="_blank" rel="noopener">微信视频号推荐算法解题思路</a></p><p>nn模型用的是deepctr的deepfm模型，树模型用的lightgbm</p><ul><li>对nn尝试过各类采样方法都没有全量训练效果好</li><li>deepfm的dnn层数[128,128,128]好像就够用了</li><li>使用adam比adagrad好</li><li>deepfm、xdeepfm、autoint效果差不多</li><li>batchsize尝试中1024结果比较好</li><li>deepfm中统计特征的作用不大，加上feed embedding后有很大的提升</li><li>对tags和keyword使用word2vec好像没有multilable降维后好用</li><li>user相关的特征比较好用，feed的特征作用不是很明显</li><li><p>nn多折融合有明显的提升，融合树模型和nn也有大的提升</p></li><li><p>没有利用到任务间的相关性，没来的急试试mmoe</p></li></ul><p>想看看大佬是怎么做的，等着大佬分享</p><p><strong>数据集下载</strong></p><p>链接: <a href="https://pan.baidu.com/s/1SPmyv7zoHhDVm57N0OgUzA" target="_blank" rel="noopener">https://pan.baidu.com/s/1SPmyv7zoHhDVm57N0OgUzA</a></p><p>提取码: 8g95 </p><p><a href="https://github.com/BENULL/WeChatBigDataChallenge2021" target="_blank" rel="noopener"><strong>代码地址</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记一次大数据挑战赛&quot;&gt;&lt;a href=&quot;#记一次大数据挑战赛&quot; class=&quot;headerlink&quot; title=&quot;记一次大数据挑战赛&quot;&gt;&lt;/a&gt;记一次大数据挑战赛&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对于给定的一定数量到访过微信视频号“热门推荐”的用户， 根
      
    
    </summary>
    
    
      <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="MIX" scheme="http://yoursite.com/tags/MIX/"/>
    
      <category term="BigData" scheme="http://yoursite.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记——被讨厌的勇气</title>
    <link href="http://yoursite.com/2021/05/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/"/>
    <id>http://yoursite.com/2021/05/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/</id>
    <published>2021-05-28T08:38:22.000Z</published>
    <updated>2021-08-03T08:17:13.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://m.media-amazon.com/images/I/41BuHsbPZBL.jpg" align="center"></p><blockquote><p>作者: <a href="https://book.douban.com/search/岸见一郎" target="_blank" rel="noopener">岸见一郎</a> / <a href="https://book.douban.com/search/古贺史健" target="_blank" rel="noopener">古贺史健</a><br>出版社: 机械工业出版社<br>副标题: “自我启发之父”阿德勒的哲学课<br>原作名: 嫌われる勇気：自己啓発の源流「アドラー」の教え<br>译者: <a href="https://book.douban.com/search/渠海霞" target="_blank" rel="noopener">渠海霞</a><br>出版年: 2015-3-1<br>ISBN: 9787111495482</p></blockquote><div class="note info"><p>210515</p></div><p><strong>⭕️ “生活给我们各种束缚，表面上看起来，这些束缚是时间的、金钱的、人际关系的，但实际上，这些束缚是心灵的。阿德勒的整个理论体系，都在试图把人从这种束缚中解脱出来，让人重获心灵自由”</strong></p><p><strong>⭕️ 保持年轻的心态，令人生“只若初见”</strong></p><p><strong>⭕️  “人并不是住在客观的世界，而是住在自己营造的主观世界里”</strong></p><div class="note info"><p>210516</p></div><p><strong>⭕️ 阿德勒心理学考虑的不是过去的“原因”，而是现在的“目的”。</strong></p><p><strong>⭕️ 我们给过去的经历“赋予了什么样的意义”，这直接决定了我们的生活。人生不是由别人赋予的，而是由自己选择的，是自己选择自己如何生活。</strong></p><div class="note info"><p>210519</p></div><p><strong>⭕️ “人的烦恼皆源于人际关系。”这是阿德勒心理学的一个基本概念。如果这个世界没有人际关系，如果这个宇宙中没有他人只有自己，那么一切烦恼也都将消失”</strong></p><p><strong>⭕️ “自卑情结是指把自己的自卑感当作某种借口使用的状态。具体就像“我因为学历低所以无法成功”或者“我因为长得不漂亮所以结不了婚”之类的想法。”</strong></p><p><strong>⭕️ “健全的自卑感不是来自与别人的比较，而是来自与“理想的自己”的比较。”</strong></p><p><strong>⭕️ “行为方面的目标有“自立”和“与社会和谐共处”这两点。”</strong></p><p><strong>⭕️ “工作上的人际关系可以说门槛最低。工作上的人际关系因为有着成果这一简单易懂的共通目标，即使有些不投缘也可以合作或者说必须合作；而且，因“工作”这一点结成的关系，在下班或者转行后就又可以变回他人关系”</strong></p><p><strong>⭕️ “请你这样想，如果在一起感到苦闷或者紧张，那即使是恋爱关系也不能称之为爱。当人能够感觉到“与这个人在一起可以无拘无束”的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱应该是这样的。”</strong></p><div class="note info"><p>210523</p></div><p><strong>⭕️ “认可欲求”，人际关系的烦恼都集中在这一点上。我们在活着时常需要得到他人的认可。正因为对方不是令人讨厌的“敌人”，所以才想要得到那个人的认可！对，我就是想要得到父母的认可！”</strong></p><p><strong>⭕️ “在犹太教教义中有这么一句话：“倘若自己都不为自己活出自己的人生，那还有谁会为自己而活呢？”</strong></p><p><strong>⭕️ “我的建议是这样。首先要思考一下“这是谁的课题”。然后进行课题分离——哪些是自己的课题，哪些是别人的课题，要冷静地划清界限。”</strong></p><p><strong>⭕️ “阿德勒心理学中有反常识的方面”</strong></p><p><strong>⭕️ “选择了不自由生活方式的大人看着自由活在当下的年轻人就会批判其“享乐主义”。当然，这其实是为了让自己接受不自由生活而捏造出的一种人生谎言。选择了真正自由的大人就不会说这样的话，相反还会鼓励年轻人要勇于争取自由。”</strong></p><p><strong>⭕️“不畏惧被人讨厌而是勇往直前，不随波逐流而是激流勇进，这才是对人而言的自由。”</strong></p><div class="note info"><p>210524</p></div><p><strong>⭕️ “把他人看作伙伴并能够从中感到“自己有位置”的状态，就叫共同体感觉”</strong></p><p><strong>⭕️ “共同体感觉是幸福的人际关系的最重要的指标”</strong></p><p><strong>⭕️ “请你考虑一下认可欲求的实质——他人如何关注自己、如何评价自己？又在多大程度上满足自己的欲求？受这种认可欲求束缚的人看似在看着他人，但实际上眼里却只有自己。失去了对他人的关心而只关心“我”，也就是以自我为中心。”</strong></p><p><strong>⭕️ “抱着自己位于世界中心这种信念的人很快就会失去“朋友”</strong></p><p><strong>⭕️ “例如，人怎样才能够获得“勇气”？阿德勒的见解是：人只有在能够感觉自己有价值的时候才可以获得勇气”</strong></p><div class="note info"><p>210527</p></div><p><strong>⭕️ “自我意识总是牵绊着自己、严重束缚着自己的言行。我的自我意识根本不允许自己无拘无束地行动。”</strong></p><p><strong>⭕️ “首先，真诚地接受不能交换的“这个我”，这就是自我接纳。同时，对他人寄予无条件的信赖即他者信赖。”</strong></p><p><strong>⭕️ 行为方面的目标</strong></p><ul><li><strong>自立</strong></li><li><strong>与社会和谐共处</strong></li></ul><p><strong>⭕️ 支撑这种行为的心理方面的目标</strong></p><ul><li><strong>“我有能力”的意识。</strong></li><li><strong>“人人都是我的伙伴”的意识。”</strong></li></ul><p><strong>⭕️ “具有神经质生活方式的人常常使用“大家”“总是”或者“一切”之类的词语。“大家都讨厌自己”“总是只有自己受损失”或者“一切都不对”等。如果你常常说这种一般化的词语，那就需要注意了。”</strong></p><p><strong>⭕️ “缺乏人生和谐的人就会只关注讨厌自己的那个人来判断“世界”。”</strong></p><p><strong>⭕️ “口吃为什么会很痛苦呢？阿德勒心理学认为苦恼于口吃的人只关心“自己的说话方式”，从而感到自卑和痛苦。因此，自我意识就会变得过剩，说话也会更加不顺畅。”</strong></p><p><strong>⭕️ “是的。笑话别人口吃的人只是极少数。用刚才的话说，充其量就是“10人中的1人”。并且，采取这种嘲笑态度的愚蠢的人，我们可以主动与其切断关系。但是，如果缺乏人生和谐，那就会只关注这1个人，并认为“大家都嘲笑我”。”</strong></p><p><strong>⭕️ “只考虑公司的工作，那是一种缺乏人生和谐的生活方式。”</strong></p><p><strong>⭕️ “获得贡献感的手段一旦成了“被他人认可”，最终就不得不按照他人的愿望来过自己的人生。通过认可欲求获得的贡献感没有自由。但我们人类是在选择自由的同时也在追求幸福。”</strong></p><p><strong>⭕️ “无论是希望特别优秀还是希望特别差劲，其目的都一样——引起他人的关注、脱离“普通”状态、成为“特别的存在”。这就是他们的目的。”</strong></p><p><strong>⭕️ “自我接纳就是其中的重要一步。如果你能够拥有“甘于平凡的勇气”，那么对世界的看法也会截然不同。”</strong></p><p><strong>⭕️ “想要到达目的地的人生可以称为“潜在性的人生”。与此相对，我所说的像跳舞一样的人生则可以称为“现实性的人生”。”</strong></p><p><strong>⭕️ “最重要的是“此时此刻”</strong></p><div class="note info"><p>210528</p></div><p>⭕️ <strong>“人生并不存在可以作为常识来讲的意义”</strong></p><p><strong>⭕️ “哲学真正的意义不在于“知识”而在于“热爱知识”，想要了解不了解的事物以及获得知识的过程非常重要。”</strong></p><p><strong>⭕️ “如果有人认为难以接纳阿德勒思想，那是因为这种思想是反常识观点的集大成者，而且要想理解它也需要日常生活中的实践；”</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://m.media-amazon.com/images/I/41BuHsbPZBL.jpg&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者: &lt;a href=&quot;https://book.douban.com/s
      
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/categories/Reading/"/>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Transformer(Attention Is All You Need)</title>
    <link href="http://yoursite.com/2021/05/16/[%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB]%20Transformer(Attention%20Is%20All%20You%20Need)/"/>
    <id>http://yoursite.com/2021/05/16/[%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB]%20Transformer(Attention%20Is%20All%20You%20Need)/</id>
    <published>2021-05-16T03:54:54.000Z</published>
    <updated>2021-12-21T10:57:17.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="论文阅读-Transformer-Attention-Is-All-You-Need"><a href="#论文阅读-Transformer-Attention-Is-All-You-Need" class="headerlink" title="[论文阅读] Transformer(Attention Is All You Need)"></a>[论文阅读] Transformer(Attention Is All You Need)</h1><blockquote><p>单位: Google</p><p>会议: NeurIPS 2017</p><p>论文地址: <a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="noopener">arxiv</a></p><p>代码: <a href="https://github.com/tensorflow/tensor2tensor" target="_blank" rel="noopener">tensorflow/tensor2tensor official</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210516114517723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Seq2Seq"><a href="#Seq2Seq" class="headerlink" title="Seq2Seq"></a>Seq2Seq</h2><p><img src="https://img-blog.csdnimg.cn/2021051611451353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>Encoder和Decoder在早期一般是RNN模块，后来引入了LSTM或者GRU模块，核心思想都是通过Encoder编码成一个表示向量，即上下文编码向量，然后交给Decoder来进行解码，翻译成目标语言</p><p><strong>RNN的局限</strong></p><ul><li><p>对于不同输入和输出长度，中间的上下文编码向量长度固定的，仅仅靠一个固定长度的上下文编码向量包含的信息有限</p></li><li><p>RNN 本质是一个马尔科夫决策过程无法很好地学习到全局的结构信息</p></li><li><p>难以并行化，速度慢</p></li></ul><p><strong>CNN</strong></p><p>在 FaceBook 的论文(Convolutional Sequence to Sequence Learning）中纯粹使用CNN也完成了 Seq2Seq 的学习</p><p><strong>CNN 方便并行，而且容易捕捉到一些全局的结构信息</strong></p><p>但CNN 事实上只能获取局部信息，是通过层叠来增大感受野</p><p><img src="https://img-blog.csdnimg.cn/20210516114513298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>在Transformer中，完全抛弃了RNN和CNN等网络结构，仅仅采用Attention机制就取得了很好的效果，具有更好的质量，同时具有更高的并行性和更少的训练时间</strong></p><p>这篇主要贡献之一是<strong>它表明了内部注意力在机器翻译（甚至是一般的 Seq2Seq 任务）的序列编码上是相当重要的</strong>，而之前关于 Seq2Seq 的研究基本都只是把注意力机制用在解码端。</p><h2 id="Transformer-Architecture"><a href="#Transformer-Architecture" class="headerlink" title="Transformer Architecture"></a>Transformer Architecture</h2><p><img src="https://img-blog.csdnimg.cn/20210516114512905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Transformer结构可以表示为Encoder和Decoder两个部分</p><p>Encoder和Decoder主要由Self-Attention和Feed-Forward Network两个组件构成</p><p>Self-Attention由Scaled Dot-Product Attention和Multi-Head Attention两个组件构成。</p><h2 id="Self-Attention"><a href="#Self-Attention" class="headerlink" title="Self-Attention"></a>Self-Attention</h2><p><strong>Attention</strong> <strong>机制来自于人类视觉注意力机制</strong>,人们视觉在感知东西的时候一般不会是一个场景从到头看到尾每次全部都看，而往往是根据需求观察注意特定的一部分</p><p><img src="https://img-blog.csdnimg.cn/20210516114514447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">注意力函数的本质可以被描述为一个查询（query）到一系列（键key-value值)对的映射</p><p>给定一个和任务相关的查询查询向量 <strong>q</strong>，通过计算与<strong>Key</strong>的注意力分布并附加在<strong>Value</strong>上，从而计算<strong>Attention Value</strong></p><p><strong>引入attention的好处</strong></p><ul><li><p>注意力允许解码器以不同程度的权重利用到编码器的所有信息</p></li><li><p>通过检查注意力分布，可以看到解码器在关注什么，可解释性</p></li></ul><p>Self-Attention的QKV来自同一个输入，也就是说在序列内部做 Attention，寻找序列内部的联系，故称为自注意力层</p><h3 id="Scaled-Dot-Product-Attention"><a href="#Scaled-Dot-Product-Attention" class="headerlink" title="Scaled Dot-Product Attention"></a>Scaled Dot-Product Attention</h3><p><img src="https://img-blog.csdnimg.cn/20210516114512994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script type="math/tex; mode=display">\operatorname{Attention}(\boldsymbol{Q}, \boldsymbol{K}, \boldsymbol{V})=\operatorname{softmax}\left(\frac{\boldsymbol{Q} \boldsymbol{K}^{\top}}{\sqrt{d_{k}}}\right) \boldsymbol{V}</script><p>计算过程</p><ol><li>对每个输入单词$x^1,x^2,x^3$转化成嵌入向量</li><li>根据嵌入向量分别得到$q$，$k$，$v$三个向量</li><li>然后将$q$和所有$k$进行点乘计算得$\alpha$</li><li>通过SoftMax转换为概率分布$\hat{\alpha}$</li><li>将概率分布和所有$v$进行加权求和得到输出$b$</li></ol><p><img src="https://img-blog.csdnimg.cn/20210516114512671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>为什么scaled?</strong></p><p>可参考<a href="https://www.zhihu.com/question/339723385" target="_blank" rel="noopener">transformer中的attention为什么scaled?</a></p><h3 id="Multi-Head-Attention"><a href="#Multi-Head-Attention" class="headerlink" title="Multi-Head Attention"></a>Multi-Head Attention</h3><p><img src="https://img-blog.csdnimg.cn/20210516114513198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script type="math/tex; mode=display">\text { head }_{\mathrm{i}}=\operatorname{Attention}\left(Q W_{i}^{Q}, K W_{i}^{K}, V W_{i}^{V}\right)</script><script type="math/tex; mode=display">\left.\operatorname{MultiHead}(Q, K, V)=\text { Concat(head }_{1}, \ldots, \text { head }_{\mathrm{h}}\right) W^{O}</script><p>Multi-Head Attention相当于多个不同Scaled Dot-Product Attention的集成，以8为例子，Multi-Head Attention步骤如下：</p><ol><li><p>将数据$X$分别输入到8个不同的Scaled Dot-Product Attention中，得到8个加权后的特征矩阵$Z_{i}, i \in{1,2, \ldots, 8}$ </p></li><li><p>将8个$Z$按列拼成一个大的特征矩阵</p></li><li><p>特征矩阵经过一层全连接得到输出$Z$</p></li></ol><p>可以类比CNN中同时使用多个卷积核的作用，多头的注意力有助于网络捕捉到更丰富的信息，每个head关注的点可能不一样，可以处理不同的任务</p><h2 id="Positional-Encoding"><a href="#Positional-Encoding" class="headerlink" title="Positional  Encoding"></a>Positional  Encoding</h2><p>transformer内部没有类似RNN的循环结构，没有捕捉顺序序列的能力，无论句子结构怎么打乱，transformer都会得到类似的结果</p><p>为了解决这个问题，在编码词向量时会额外引入了位置编码向量</p><p>将每个位置编号，然后每个编号对应一个向量，通过结合位置向量和词向量，就给每个词都引入了一定的位置信息，这样 Attention 就可以分辨出不同位置的词了</p><p><img src="https://img-blog.csdnimg.cn/2021051611451387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>将向量的512维度切分为奇数行和偶数行</li><li>偶数行采用sin函数编码，奇数行采用cos函数编码</li><li>然后按照原始行号拼接</li></ul><p>由于有</p><script type="math/tex; mode=display">\sin (a+\beta)=\sin \alpha \cos \beta+\cos a \sin \beta \\\cos (\alpha+\beta)=\cos a \cos \beta-\sin \alpha \sin \beta</script><p>所有的$PE<em>{pos+k}$可以用$PE</em>{pos}$线性表出，表达了相对位置信息</p><p>同样的也可以训练得到位置编码向量，但是试验结果表明相差不大，因此论文选择了直接定义，这样直接计算而不需要训练，减少了训练参数，同时允许模型将位置编码向量扩展到超过了训练集中最长序列长度的位置编码</p><h2 id="Feed-Forward-Networds"><a href="#Feed-Forward-Networds" class="headerlink" title="Feed-Forward Networds"></a>Feed-Forward Networds</h2><p>在每个子层中，Multi-Head Attention层都接了一个FFN层，先线性变换，然后ReLU非线性，再线性变换</p><script type="math/tex; mode=display">F F N(x)=\max \left(0, x W_{1}+b_{1}\right) W_{2}+b_{2}</script><p>作用将Attention结果映射到一个更大维度的特征空间</p><p>在抛弃了 LSTM 结构后，FFN 中的 ReLU成为了一个主要的能<strong>提供非线性变换的单元</strong></p><h2 id="Layer-Norm"><a href="#Layer-Norm" class="headerlink" title="Layer Norm"></a>Layer Norm</h2><p>主要的几种归一化方法</p><ul><li><p>Batch Normalization</p></li><li><p>Layer Normalization</p></li><li><p>Instance Normalization</p></li><li><p>Group Normalization</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210516114512866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将输入的图像shape记为<code>[N, C, H, W]</code>，这几个方法主要的区别</p><p>BatchNorm是在batch上，对NHW做归一化，对小batchsize效果不好<br>LayerNorm在通道方向上，对CHW归一化，主要对RNN作用明显<br>InstanceNorm在图像像素上，对HW做归一化，用在风格化迁移<br>GroupNorm将channel分组，然后再做归一化</p><p><strong>Transformer为什么选用Layer Normalization呢？</strong></p><p>看了知乎上一些关于使用BN效果不好的讨论</p><p>比较同意是因为NLP数据和CV数据特性不同带来的影响，<strong>数据的相关性表现在哪个维度，决定了采用何种信息抽取方式</strong></p><p>BN是对不同样本的同一特征做操作而LN是对单个样本的不同特征做操作</p><blockquote><p>在NLP中不同batch样本的信息关联性不大，而且由于不同的句子长度不同，强行归一化会损失不同样本间的差异信息，所以就没在batch维度进行归一化，而是选择LN，只考虑的句子内部维度的归一化。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://zhuanlan.zhihu.com/p/308301901?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=765637550864871424" target="_blank" rel="noopener">3W字长文带你轻松入门视觉transformer - 知乎</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&amp;mid=2247486960&amp;idx=1&amp;sn=1b4b9d7ec7a9f40fa8a9df6b6f53bbfb&amp;chksm=96e9d270a19e5b668875392da1d1aaa28ffd0af17d44f7ee81c2754c78cc35edf2e35be2c6a1&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">一文读懂「Attention is All You Need」| 附代码实现</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/105493618" target="_blank" rel="noopener">深度学习-图解Transformer (变形金刚) - 知乎</a></p></li><li><p><a href="https://blog.csdn.net/c9Yv2cf9I06K2A9E/article/details/79739287?utm_source=blogxgwz0" target="_blank" rel="noopener">自然语言处理中的自注意力机制（Self-Attention Mechanism）_Paper weekly-CSDN博客</a></p></li><li><p><a href="https://www.zhihu.com/question/68482809" target="_blank" rel="noopener">目前主流的attention方法都有哪些？ - 知乎</a></p></li><li><p><a href="https://www.zhihu.com/search?type=content&amp;q=transformer位置编码" target="_blank" rel="noopener">transformer 位置编码</a></p></li><li><p><a href="https://www.zhihu.com/search?type=content&amp;q=transformer多头的好处" target="_blank" rel="noopener">transformer 多头的好处</a></p></li><li><p><a href="https://www.zhihu.com/question/395811291" target="_blank" rel="noopener">transformer 为什么使用 layer normalization，而不是其他的归一化方法</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/266069794" target="_blank" rel="noopener">计算机视觉”新”范式: Transforme</a></p></li><li><p>Transformer课程——李宏毅</p></li><li><p><a href="https://www.zhihu.com/question/347678607/answer/864217252" target="_blank" rel="noopener">如何理解<em>Transformer</em>论文中的positional encoding，和三角函数有什么关系？</a></p></li><li><p><a href="https://blog.csdn.net/liuxiao214/article/details/81037416" target="_blank" rel="noopener">BatchNormalization、LayerNormalization、InstanceNorm、GroupNorm、SwitchableNorm总结</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;论文阅读-Transformer-Attention-Is-All-You-Need&quot;&gt;&lt;a href=&quot;#论文阅读-Transformer-Attention-Is-All-You-Need&quot; class=&quot;headerlink&quot; title=&quot;[论文阅读] T
      
    
    </summary>
    
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
      <category term="Paper" scheme="http://yoursite.com/tags/Paper/"/>
    
      <category term="Transformer" scheme="http://yoursite.com/tags/Transformer/"/>
    
  </entry>
  
  <entry>
    <title>Scala练手 2048</title>
    <link href="http://yoursite.com/2021/05/12/[Scala]%202048%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2021/05/12/[Scala]%202048%E5%B0%8F%E6%B8%B8%E6%88%8F/</id>
    <published>2021-05-12T10:54:38.000Z</published>
    <updated>2021-05-12T10:55:57.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scala-2048小游戏"><a href="#Scala-2048小游戏" class="headerlink" title="[Scala] 2048小游戏"></a>[Scala] 2048小游戏</h1><blockquote><p>很长一段时间没有用过Scala，重新学习了下顺便写个小游戏练练手</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210512183822186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyODE1ODA3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>规则</strong></p><ul><li>相同数字的两个格子，相撞时数字会相加。</li><li>每次滑动时，空白处会随机刷新出一个数字的格子。</li><li>当界面全部被数字填满时游戏结束；当界面中最大数字是2048时，游戏胜利</li></ul><p><strong>代码</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Game2048</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> target = <span class="number">2048</span></span><br><span class="line">  <span class="keyword">var</span> highest = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">SwingUtilities</span>.invokeLater(() =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> f = <span class="keyword">new</span> <span class="type">JFrame</span></span><br><span class="line">      f.setDefaultCloseOperation(<span class="number">3</span>)</span><br><span class="line">      f.setTitle(<span class="string">"2048"</span>)</span><br><span class="line">      f.add(<span class="keyword">new</span> <span class="type">Game</span>, <span class="type">BorderLayout</span>.<span class="type">CENTER</span>)</span><br><span class="line">      f.pack()</span><br><span class="line">      f.setLocationRelativeTo(<span class="literal">null</span>)</span><br><span class="line">      f.setVisible(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">JPanel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> (rand, side) = (<span class="keyword">new</span> <span class="type">Random</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> (tiles, game) = (<span class="type">Array</span>.ofDim[<span class="type">Tile</span>](side, side), <span class="type">State</span>.start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">val</span> colorTable =</span><br><span class="line">      <span class="type">Seq</span>(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0x701710</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xFFE4C3</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xfff4d3</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xffdac3</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xe7b08e</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xe7bf8e</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xffc4c3</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xE7948e</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xbe7e56</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xbe5e56</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0x9c3931</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0x701710</span>))</span><br><span class="line"></span><br><span class="line">    setPreferredSize(<span class="keyword">new</span> <span class="type">Dimension</span>(<span class="number">900</span>, <span class="number">700</span>))</span><br><span class="line">    setBackground(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xFAF8EF</span>))</span><br><span class="line">    setFont(<span class="keyword">new</span> <span class="type">Font</span>(<span class="string">"SansSerif"</span>, <span class="type">Font</span>.<span class="type">BOLD</span>, <span class="number">48</span>))</span><br><span class="line">    setFocusable(<span class="literal">true</span>)</span><br><span class="line">    addMouseListener(<span class="keyword">new</span> <span class="type">MouseAdapter</span>() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">mousePressed</span></span>(e: <span class="type">MouseEvent</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        startGame()</span><br><span class="line">        repaint()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    addKeyListener(<span class="keyword">new</span> <span class="type">KeyAdapter</span>() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">keyPressed</span></span>(e: <span class="type">KeyEvent</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        e.getKeyCode <span class="keyword">match</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="type">KeyEvent</span>.<span class="type">VK_UP</span> =&gt; moveUp()</span><br><span class="line">          <span class="keyword">case</span> <span class="type">KeyEvent</span>.<span class="type">VK_DOWN</span> =&gt; moveDown()</span><br><span class="line">          <span class="keyword">case</span> <span class="type">KeyEvent</span>.<span class="type">VK_LEFT</span> =&gt; moveLeft()</span><br><span class="line">          <span class="keyword">case</span> <span class="type">KeyEvent</span>.<span class="type">VK_RIGHT</span> =&gt; moveRight()</span><br><span class="line">          <span class="keyword">case</span> _ =&gt;</span><br><span class="line">        &#125;</span><br><span class="line">        repaint()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">paintComponent</span></span>(gg: <span class="type">Graphics</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">super</span>.paintComponent(gg)</span><br><span class="line">      <span class="keyword">val</span> g = gg.asInstanceOf[<span class="type">Graphics2D</span>]</span><br><span class="line">      g.setRenderingHint(<span class="type">RenderingHints</span>.<span class="type">KEY_ANTIALIASING</span>, <span class="type">RenderingHints</span>.<span class="type">VALUE_ANTIALIAS_ON</span>)</span><br><span class="line">      drawGrid(g)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">drawGrid</span></span>(g: <span class="type">Graphics2D</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> (gridColor, emptyColor, startColor) = (<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xBBADA0</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xCDC1B4</span>), <span class="keyword">new</span> <span class="type">Color</span>(<span class="number">0xFFEBCD</span>))</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (game == <span class="type">State</span>.running) &#123;</span><br><span class="line">        g.setColor(gridColor)</span><br><span class="line">        g.fillRoundRect(<span class="number">200</span>, <span class="number">100</span>, <span class="number">499</span>, <span class="number">499</span>, <span class="number">15</span>, <span class="number">15</span>)</span><br><span class="line">        <span class="keyword">for</span> (</span><br><span class="line">          r &lt;- <span class="number">0</span> until side;</span><br><span class="line">          c &lt;- <span class="number">0</span> until side</span><br><span class="line">        ) <span class="keyword">if</span> (<span class="type">Option</span>(tiles(r)(c)).isEmpty) &#123;</span><br><span class="line">          g.setColor(emptyColor)</span><br><span class="line">          g.fillRoundRect(<span class="number">215</span> + c * <span class="number">121</span>, <span class="number">115</span> + r * <span class="number">121</span>, <span class="number">106</span>, <span class="number">106</span>, <span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> drawTile(g, r, c)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        g.setColor(startColor)</span><br><span class="line">        g.fillRoundRect(<span class="number">215</span>, <span class="number">115</span>, <span class="number">469</span>, <span class="number">469</span>, <span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line">        g.setColor(gridColor.darker)</span><br><span class="line">        g.setFont(<span class="keyword">new</span> <span class="type">Font</span>(<span class="string">"SansSerif"</span>, <span class="type">Font</span>.<span class="type">BOLD</span>, <span class="number">128</span>))</span><br><span class="line">        g.drawString(<span class="string">"2048"</span>, <span class="number">310</span>, <span class="number">270</span>)</span><br><span class="line">        g.setFont(<span class="keyword">new</span> <span class="type">Font</span>(<span class="string">"SansSerif"</span>, <span class="type">Font</span>.<span class="type">BOLD</span>, <span class="number">20</span>))</span><br><span class="line">        <span class="keyword">if</span> (game == <span class="type">State</span>.won) g.drawString(<span class="string">"you made it!"</span>, <span class="number">390</span>, <span class="number">350</span>)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (game == <span class="type">State</span>.over) g.drawString(<span class="string">"game over"</span>, <span class="number">400</span>, <span class="number">350</span>)</span><br><span class="line">        g.setColor(gridColor)</span><br><span class="line">        g.drawString(<span class="string">"click to start a new game"</span>, <span class="number">330</span>, <span class="number">470</span>)</span><br><span class="line">        g.drawString(<span class="string">"(use arrow keys to move tiles)"</span>, <span class="number">310</span>, <span class="number">530</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">drawTile</span></span>(g: <span class="type">Graphics2D</span>, r: <span class="type">Int</span>, c: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> value = tiles(r)(c).value</span><br><span class="line">      g.setColor(colorTable((math.log(value) / math.log(<span class="number">2</span>)).toInt + <span class="number">1</span>))</span><br><span class="line">      g.fillRoundRect(<span class="number">215</span> + c * <span class="number">121</span>, <span class="number">115</span> + r * <span class="number">121</span>, <span class="number">106</span>, <span class="number">106</span>, <span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line">      g.setColor(<span class="keyword">if</span> (value &lt; <span class="number">128</span>) colorTable.head <span class="keyword">else</span> colorTable(<span class="number">1</span>))</span><br><span class="line">      <span class="keyword">val</span> (s, fm) = (value.toString, g.getFontMetrics)</span><br><span class="line">      <span class="keyword">val</span> asc = fm.getAscent</span><br><span class="line">      <span class="keyword">val</span> (x, y) = (<span class="number">215</span> + c * <span class="number">121</span> + (<span class="number">106</span> - fm.stringWidth(s)) / <span class="number">2</span>, <span class="number">115</span> + r * <span class="number">121</span> + (asc + (<span class="number">106</span> - (asc + fm.getDescent)) / <span class="number">2</span>))</span><br><span class="line">      g.drawString(s, x, y)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">moveUp</span></span>(checkingAvailableMoves: <span class="type">Boolean</span> = <span class="literal">false</span>) = move(<span class="number">-1</span>, <span class="number">0</span>, checkingAvailableMoves)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">moveDown</span></span>(checkingAvailableMoves: <span class="type">Boolean</span> = <span class="literal">false</span>) = move(<span class="number">1</span>, <span class="number">0</span>, checkingAvailableMoves)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">moveLeft</span></span>(checkingAvailableMoves: <span class="type">Boolean</span> = <span class="literal">false</span>) = move(<span class="number">0</span>, <span class="number">-1</span>, checkingAvailableMoves)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">moveRight</span></span>(checkingAvailableMoves: <span class="type">Boolean</span> = <span class="literal">false</span>) = move(<span class="number">0</span>, <span class="number">1</span>, checkingAvailableMoves)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">clearMerged</span></span>(): <span class="type">Unit</span> = <span class="keyword">for</span> (row &lt;- tiles; tile &lt;- row) <span class="keyword">if</span> (<span class="type">Option</span>(tile).isDefined) tile.setMerged()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">movesAvailable</span></span>() = moveUp(<span class="literal">true</span>) || moveDown(<span class="literal">true</span>) || moveLeft(<span class="literal">true</span>) || moveRight(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(yIncr: <span class="type">Int</span>, xIncr: <span class="type">Int</span>, checkingAvailableMoves: <span class="type">Boolean</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">      <span class="keyword">var</span> moved = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until side;</span><br><span class="line">           j &lt;- <span class="number">0</span> until side) <span class="keyword">if</span> (<span class="type">Option</span>(tiles(i)(j)).isDefined) &#123;</span><br><span class="line">        <span class="keyword">var</span> (r, c) = (i, j)</span><br><span class="line">        <span class="keyword">var</span> (nextR, nextC, breek) = (i + yIncr, j + xIncr, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">while</span> ((nextR &gt;= <span class="number">0</span> &amp;&amp; nextR &lt; side &amp;&amp; nextC &gt;= <span class="number">0</span> &amp;&amp; nextC &lt; side) &amp;&amp; !breek) &#123;</span><br><span class="line">          <span class="keyword">val</span> (next, curr) = (tiles(nextR)(nextC), tiles(r)(c))</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="type">Option</span>(next).isEmpty)</span><br><span class="line">            <span class="keyword">if</span> (checkingAvailableMoves) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              tiles(nextR)(nextC) = curr</span><br><span class="line">              tiles(r)(c) = <span class="literal">null</span></span><br><span class="line">              r = nextR</span><br><span class="line">              c = nextC</span><br><span class="line">              nextR += yIncr</span><br><span class="line">              nextC += xIncr</span><br><span class="line">              moved = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (next.canMergeWith(curr)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkingAvailableMoves) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            highest = math.max(next.mergeWith(curr), highest)</span><br><span class="line">            tiles(r)(c) = <span class="literal">null</span></span><br><span class="line">            breek = <span class="literal">true</span></span><br><span class="line">            moved = <span class="literal">true</span></span><br><span class="line">          &#125; <span class="keyword">else</span> breek = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      updateState(moved)</span><br><span class="line">      moved</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">updateState</span></span>(moved: <span class="type">Boolean</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (moved &amp;&amp; highest &lt; target) &#123;</span><br><span class="line">        clearMerged()</span><br><span class="line">        addRandomTile()</span><br><span class="line">        <span class="keyword">if</span> (!movesAvailable) game = <span class="type">State</span>.over</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (highest == target) game = <span class="type">State</span>.won</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">startGame</span></span>(): <span class="type">Unit</span> = <span class="keyword">if</span> (game ne <span class="type">State</span>.running) &#123;</span><br><span class="line">      highest = <span class="number">0</span></span><br><span class="line">      game = <span class="type">State</span>.running</span><br><span class="line">      tiles = <span class="type">Array</span>.ofDim[<span class="type">Tile</span>](side, side)</span><br><span class="line">      addRandomTile()</span><br><span class="line">      addRandomTile()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">addRandomTile</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">var</span> pos = rand.nextInt(side * side)</span><br><span class="line">      <span class="keyword">var</span> (row, col) = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      do &#123;</span><br><span class="line">        pos = (pos + <span class="number">1</span>) % (side * side)</span><br><span class="line">        row = pos / side</span><br><span class="line">        col = pos % side</span><br><span class="line">      &#125; <span class="keyword">while</span> (<span class="type">Option</span>(tiles(row)(col)).isDefined)</span><br><span class="line">      tiles(row)(col) = <span class="type">Tile</span>(<span class="keyword">if</span> (rand.nextInt(<span class="number">10</span>) == <span class="number">0</span>) <span class="number">4</span> <span class="keyword">else</span> <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="https://github.com/BENULL/2048" target="_blank" rel="noopener">完整代码</a></strong></p><p><strong>后面可以考虑加上AI，尝试基于规则或强化学习的方法</strong></p><ul><li><a href="http://blog.codinglabs.org/articles/2048-ai-analysis.html" target="_blank" rel="noopener">2048-AI程序算法分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/150248976" target="_blank" rel="noopener">你玩《2048》能拿多少分？AI的最高分纪录：401912</a></li><li><a href="https://blog.csdn.net/qq_32767041/article/details/80634244" target="_blank" rel="noopener">2048AI设计与实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scala-2048小游戏&quot;&gt;&lt;a href=&quot;#Scala-2048小游戏&quot; class=&quot;headerlink&quot; title=&quot;[Scala] 2048小游戏&quot;&gt;&lt;/a&gt;[Scala] 2048小游戏&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;很长一段时间没有用
      
    
    </summary>
    
    
      <category term="Project" scheme="http://yoursite.com/categories/Project/"/>
    
    
      <category term="Scala" scheme="http://yoursite.com/tags/Scala/"/>
    
  </entry>
  
</feed>
